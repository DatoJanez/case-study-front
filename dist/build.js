"use strict";var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function __extends(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function isFunction(e){return"function"==typeof e}var _enable_super_gross_mode_that_will_cause_bad_things=!1,config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;_enable_super_gross_mode_that_will_cause_bad_things=e},get useDeprecatedSynchronousErrorHandling(){return _enable_super_gross_mode_that_will_cause_bad_things}};function hostReportError(e){setTimeout(function(){throw e})}var empty={closed:!0,next:function(e){},error:function(e){if(config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e)},complete:function(){}},isArray=Array.isArray||function(e){return e&&"number"==typeof e.length};function isObject(e){return null!=e&&"object"==typeof e}var tryCatchTarget,errorObject={e:{}};function tryCatcher(){try{return tryCatchTarget.apply(this,arguments)}catch(e){return errorObject.e=e,errorObject}}function tryCatch(e){return tryCatchTarget=e,tryCatcher}var UnsubscriptionError=function(n){function r(e){var t=n.call(this,e?e.length+" errors occurred during unsubscription:\n  "+e.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"")||this;return t.errors=e,t.name="UnsubscriptionError",Object.setPrototypeOf(t,r.prototype),t}return __extends(r,n),r}(Error),Subscription=function(){function r(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}var e;return r.prototype.unsubscribe=function(){var e,t=!1;if(!this.closed){var n=this,r=n._parent,i=n._parents,o=n._unsubscribe,s=n._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var c=-1,u=i?i.length:0;r;)r.remove(this),r=++c<u&&i[c]||null;if(isFunction(o))tryCatch(o).call(this)===errorObject&&(t=!0,e=e||(errorObject.e instanceof UnsubscriptionError?flattenUnsubscriptionErrors(errorObject.e.errors):[errorObject.e]));if(isArray(s))for(c=-1,u=s.length;++c<u;){var a=s[c];if(isObject(a))if(tryCatch(a.unsubscribe).call(a)===errorObject){t=!0,e=e||[];var l=errorObject.e;l instanceof UnsubscriptionError?e=e.concat(flattenUnsubscriptionErrors(l.errors)):e.push(l)}}if(t)throw new UnsubscriptionError(e)}},r.prototype.add=function(e){if(!e||e===r.EMPTY)return r.EMPTY;if(e===this)return this;var t=e;switch(typeof e){case"function":t=new r(e);case"object":if(t.closed||"function"!=typeof t.unsubscribe)return t;if(this.closed)return t.unsubscribe(),t;if("function"!=typeof t._addParent){var n=t;(t=new r)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(t),t._addParent(this),t},r.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},r.prototype._addParent=function(e){var t=this._parent,n=this._parents;t&&t!==e?n?-1===n.indexOf(e)&&n.push(e):this._parents=[e]:this._parent=e},r.EMPTY=((e=new r).closed=!0,e),r}();function flattenUnsubscriptionErrors(e){return e.reduce(function(e,t){return e.concat(t instanceof UnsubscriptionError?t.errors:t)},[])}var rxSubscriber="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("rxSubscriber"):"@@rxSubscriber",Subscriber=function(o){function i(e,t,n){var r=o.call(this)||this;switch(r.syncErrorValue=null,r.syncErrorThrown=!1,r.syncErrorThrowable=!1,r.isStopped=!1,arguments.length){case 0:r.destination=empty;break;case 1:if(!e){r.destination=empty;break}if("object"==typeof e){if(isTrustedSubscriber(e)){var i=e[rxSubscriber]();r.syncErrorThrowable=i.syncErrorThrowable,(r.destination=i).add(r)}else r.syncErrorThrowable=!0,r.destination=new SafeSubscriber(r,e);break}default:r.syncErrorThrowable=!0,r.destination=new SafeSubscriber(r,e,t,n)}return r}return __extends(i,o),i.prototype[rxSubscriber]=function(){return this},i.create=function(e,t,n){var r=new i(e,t,n);return r.syncErrorThrowable=!1,r},i.prototype.next=function(e){this.isStopped||this._next(e)},i.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},i.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},i.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,o.prototype.unsubscribe.call(this))},i.prototype._next=function(e){this.destination.next(e)},i.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},i.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},i.prototype._unsubscribeAndRecycle=function(){var e=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=t,this},i}(Subscription),SafeSubscriber=function(c){function e(e,t,n,r){var i,o=c.call(this)||this;o._parentSubscriber=e;var s=o;return isFunction(t)?i=t:t&&(i=t.next,n=t.error,r=t.complete,t!==empty&&(isFunction((s=Object.create(t)).unsubscribe)&&o.add(s.unsubscribe.bind(s)),s.unsubscribe=o.unsubscribe.bind(o))),o._context=s,o._next=i,o._error=n,o._complete=r,o}return __extends(e,c),e.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},e.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=config.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?this.__tryOrSetError(t,this._error,e):this.__tryOrUnsub(this._error,e),this.unsubscribe();else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):hostReportError(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;hostReportError(e)}}},e.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,n):this.__tryOrUnsub(n),this.unsubscribe()}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e)}},e.prototype.__tryOrSetError=function(t,e,n){if(!config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return config.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0):(hostReportError(e),!0)}return!1},e.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},e}(Subscriber);function isTrustedSubscriber(e){return e instanceof Subscriber||"syncErrorThrowable"in e&&e[rxSubscriber]}function toSubscriber(e,t,n){if(e){if(e instanceof Subscriber)return e;if(e[rxSubscriber])return e[rxSubscriber]()}return e||t||n?new Subscriber(e,t,n):new Subscriber(empty)}var observable="function"==typeof Symbol&&Symbol.observable||"@@observable";function noop(){}function pipeFromArray(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(e,t){return t(e)},e)}:noop}var Observable=function(){function n(e){this._isScalar=!1,e&&(this._subscribe=e)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(e,t,n){var r=this.operator,i=toSubscriber(e,t,n);if(r?r.call(i,this.source):i.add(this.source||!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),config.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},n.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){config.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),t.error(e)}},n.prototype.forEach=function(r,e){var i=this;return new(e=getPromiseCtor(e))(function(e,t){var n;n=i.subscribe(function(e){try{r(e)}catch(e){t(e),n&&n.unsubscribe()}},t,e)})},n.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},n.prototype[observable]=function(){return this},n.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:pipeFromArray(e)(this)},n.prototype.toPromise=function(e){var r=this;return new(e=getPromiseCtor(e))(function(e,t){var n;r.subscribe(function(e){return n=e},function(e){return t(e)},function(){return e(n)})})},n.create=function(e){return new n(e)},n}();function getPromiseCtor(e){if(e||(e=config.Promise||Promise),!e)throw new Error("no Promise impl found");return e}var ObjectUnsubscribedError=function(t){function n(){var e=t.call(this,"object unsubscribed")||this;return e.name="ObjectUnsubscribedError",Object.setPrototypeOf(e,n.prototype),e}return __extends(n,t),n}(Error),SubjectSubscription=function(r){function e(e,t){var n=r.call(this)||this;return n.subject=e,n.subscriber=t,n.closed=!1,n}return __extends(e,r),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},e}(Subscription),SubjectSubscriber=function(n){function e(e){var t=n.call(this,e)||this;return t.destination=e,t}return __extends(e,n),e}(Subscriber),Subject=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return __extends(e,t),e.prototype[rxSubscriber]=function(){return new SubjectSubscriber(this)},e.prototype.lift=function(e){var t=new AnonymousSubject(this,this);return t.operator=e,t},e.prototype.next=function(e){if(this.closed)throw new ObjectUnsubscribedError;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].next(e)},e.prototype.error=function(e){if(this.closed)throw new ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].error(e);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new ObjectUnsubscribedError;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(e){if(this.closed)throw new ObjectUnsubscribedError;return this.hasError?(e.error(this.thrownError),Subscription.EMPTY):this.isStopped?(e.complete(),Subscription.EMPTY):(this.observers.push(e),new SubjectSubscription(this,e))},e.prototype.asObservable=function(){var e=new Observable;return e.source=this,e},e.create=function(e,t){return new AnonymousSubject(e,t)},e}(Observable),AnonymousSubject=function(r){function e(e,t){var n=r.call(this)||this;return n.destination=e,n.source=t,n}return __extends(e,r),e.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},e.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},e.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},e.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):Subscription.EMPTY},e}(Subject);function refCount(){return function(e){return e.lift(new RefCountOperator(e))}}var RefCountOperator=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var n=this.connectable;n._refCount++;var r=new RefCountSubscriber(e,n),i=t.subscribe(r);return r.closed||(r.connection=n.connect()),i},e}(),RefCountSubscriber=function(r){function e(e,t){var n=r.call(this,e)||this;return n.connectable=t,n}return __extends(e,r),e.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,1<t)this.connection=null;else{var n=this.connection,r=e._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(Subscriber),ConnectableObservable=function(r){function e(e,t){var n=r.call(this)||this;return n.source=e,n.subjectFactory=t,n._refCount=0,n._isComplete=!1,n}return __extends(e,r),e.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},e.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new Subscription).add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(),this))),e.closed?(this._connection=null,e=Subscription.EMPTY):this._connection=e),e},e.prototype.refCount=function(){return refCount()(this)},e}(Observable),ConnectableSubscriber=function(r){function e(e,t){var n=r.call(this,e)||this;return n.connectable=t,n}return __extends(e,r),e.prototype._error=function(e){this._unsubscribe(),r.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),r.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},e}(SubjectSubscriber),RefCountSubscriber$1=function(r){function e(e,t){var n=r.call(this,e)||this;return n.connectable=t,n}return __extends(e,r),e.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,1<t)this.connection=null;else{var n=this.connection,r=e._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(Subscriber),GroupBySubscriber=function(s){function e(e,t,n,r,i){var o=s.call(this,e)||this;return o.keySelector=t,o.elementSelector=n,o.durationSelector=r,o.subjectSelector=i,o.groups=null,o.attemptedToUnsubscribe=!1,o.count=0,o}return __extends(e,s),e.prototype._next=function(e){var t;try{t=this.keySelector(e)}catch(e){return void this.error(e)}this._group(e,t)},e.prototype._group=function(e,t){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(t);if(this.elementSelector)try{r=this.elementSelector(e)}catch(e){this.error(e)}else r=e;if(!i){i=this.subjectSelector?this.subjectSelector():new Subject,n.set(t,i);var o=new GroupedObservable(t,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new GroupedObservable(t,i))}catch(e){return void this.error(e)}this.add(s.subscribe(new GroupDurationSubscriber(t,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(n){var e=this.groups;e&&(e.forEach(function(e,t){e.error(n)}),e.clear()),this.destination.error(n)},e.prototype._complete=function(){var e=this.groups;e&&(e.forEach(function(e,t){e.complete()}),e.clear()),this.destination.complete()},e.prototype.removeGroup=function(e){this.groups.delete(e)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&s.prototype.unsubscribe.call(this))},e}(Subscriber),GroupDurationSubscriber=function(i){function e(e,t,n){var r=i.call(this,t)||this;return r.key=e,r.group=t,r.parent=n,r}return __extends(e,i),e.prototype._next=function(e){this.complete()},e.prototype._unsubscribe=function(){var e=this.parent,t=this.key;this.key=this.parent=null,e&&e.removeGroup(t)},e}(Subscriber),GroupedObservable=function(i){function e(e,t,n){var r=i.call(this)||this;return r.key=e,r.groupSubject=t,r.refCountSubscription=n,r}return __extends(e,i),e.prototype._subscribe=function(e){var t=new Subscription,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&t.add(new InnerRefCountSubscription(n)),t.add(r.subscribe(e)),t},e}(Observable),InnerRefCountSubscription=function(n){function e(e){var t=n.call(this)||this;return(t.parent=e).count++,t}return __extends(e,n),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(n.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(Subscription),BehaviorSubject=function(n){function e(e){var t=n.call(this)||this;return t._value=e,t}return __extends(e,n),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var t=n.prototype._subscribe.call(this,e);return t&&!t.closed&&e.next(this._value),t},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new ObjectUnsubscribedError;return this._value},e.prototype.next=function(e){n.prototype.next.call(this,this._value=e)},e}(Subject),Action=function(n){function e(e,t){return n.call(this)||this}return __extends(e,n),e.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},e}(Subscription),AsyncAction=function(r){function e(e,t){var n=r.call(this,e,t)||this;return n.scheduler=e,n.work=t,n.pending=!1,n}return __extends(e,r),e.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},e.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),setInterval(e.flush.bind(e,this),n)},e.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)},e.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(e,t){var n=!1,r=void 0;try{this.work(e)}catch(e){n=!0,r=!!e&&e||new Error(e)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,n=t.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},e}(Action),QueueAction=function(r){function e(e,t){var n=r.call(this,e,t)||this;return n.scheduler=e,n.work=t,n}return __extends(e,r),e.prototype.schedule=function(e,t){return void 0===t&&(t=0),0<t?r.prototype.schedule.call(this,e,t):(this.delay=t,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,t){return 0<t||this.closed?r.prototype.execute.call(this,e,t):this._execute(e,t)},e.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),null!==n&&0<n||null===n&&0<this.delay?r.prototype.requestAsyncId.call(this,e,t,n):e.flush(this)},e}(AsyncAction),Scheduler=function(){function n(e,t){void 0===t&&(t=n.now),this.SchedulerAction=e,this.now=t}return n.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(n,t)},n.now=Date.now?Date.now:function(){return+new Date},n}(),AsyncScheduler=function(r){function i(e,t){void 0===t&&(t=Scheduler.now);var n=r.call(this,e,function(){return i.delegate&&i.delegate!==n?i.delegate.now():t()})||this;return n.actions=[],n.active=!1,n.scheduled=void 0,n}return __extends(i,r),i.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),i.delegate&&i.delegate!==this?i.delegate.schedule(e,t,n):r.prototype.schedule.call(this,e,t,n)},i.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},i}(Scheduler),QueueScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(AsyncScheduler),queue=new QueueScheduler(QueueAction),EMPTY=new Observable(function(e){return e.complete()});function empty$1(e){return e?emptyScheduled(e):EMPTY}function emptyScheduled(t){return new Observable(function(e){return t.schedule(function(){return e.complete()})})}function isScheduler(e){return e&&"function"==typeof e.schedule}var subscribeToArray=function(r){return function(e){for(var t=0,n=r.length;t<n&&!e.closed;t++)e.next(r[t]);e.closed||e.complete()}};function fromArray(r,i){return new Observable(i?function(e){var t=new Subscription,n=0;return t.add(i.schedule(function(){n!==r.length?(e.next(r[n++]),e.closed||t.add(this.schedule())):e.complete()})),t}:subscribeToArray(r))}function scalar(t){var e=new Observable(function(e){e.next(t),e.complete()});return e._isScalar=!0,e.value=t,e}function of(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[e.length-1];switch(isScheduler(n)?e.pop():n=void 0,e.length){case 0:return empty$1(n);case 1:return n?fromArray(e,n):scalar(e[0]);default:return fromArray(e,n)}}function throwError(t,n){return new Observable(n?function(e){return n.schedule(dispatch,0,{error:t,subscriber:e})}:function(e){return e.error(t)})}function dispatch(e){var t=e.error;e.subscriber.error(t)}var Notification=function(){function t(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return t.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},t.prototype.do=function(e,t,n){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return n&&n()}},t.prototype.accept=function(e,t,n){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return of(this.value);case"E":return throwError(this.error);case"C":return empty$1()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}(),ObserveOnSubscriber=function(i){function t(e,t,n){void 0===n&&(n=0);var r=i.call(this,e)||this;return r.scheduler=t,r.delay=n,r}return __extends(t,i),t.dispatch=function(e){var t=e.notification,n=e.destination;t.observe(n),this.unsubscribe()},t.prototype.scheduleMessage=function(e){this.add(this.scheduler.schedule(t.dispatch,this.delay,new ObserveOnMessage(e,this.destination)))},t.prototype._next=function(e){this.scheduleMessage(Notification.createNext(e))},t.prototype._error=function(e){this.scheduleMessage(Notification.createError(e))},t.prototype._complete=function(){this.scheduleMessage(Notification.createComplete())},t}(Subscriber),ObserveOnMessage=function(){return function(e,t){this.notification=e,this.destination=t}}(),ReplaySubject=function(i){function e(e,t,n){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===t&&(t=Number.POSITIVE_INFINITY);var r=i.call(this)||this;return r.scheduler=n,r._events=[],r._infiniteTimeWindow=!1,r._bufferSize=e<1?1:e,r._windowTime=t<1?1:t,t===Number.POSITIVE_INFINITY?(r._infiniteTimeWindow=!0,r.next=r.nextInfiniteTimeWindow):r.next=r.nextTimeWindow,r}return __extends(e,i),e.prototype.nextInfiniteTimeWindow=function(e){var t=this._events;t.push(e),t.length>this._bufferSize&&t.shift(),i.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new ReplayEvent(this._getNow(),e)),this._trimBufferThenGetEvents(),i.prototype.next.call(this,e)},e.prototype._subscribe=function(e){var t,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new ObjectUnsubscribedError;if(this.isStopped||this.hasError?t=Subscription.EMPTY:(this.observers.push(e),t=new SubjectSubscription(this,e)),i&&e.add(e=new ObserveOnSubscriber(e,i)),n)for(var s=0;s<o&&!e.closed;s++)e.next(r[s]);else for(s=0;s<o&&!e.closed;s++)e.next(r[s].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),t},e.prototype._getNow=function(){return(this.scheduler||queue).now()},e.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(e-r[o].time<n);)o++;return t<i&&(o=Math.max(o,i-t)),0<o&&r.splice(0,o),r},e}(Subject),ReplayEvent=function(){return function(e,t){this.time=e,this.value=t}}(),AsyncSubject=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return __extends(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),Subscription.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),Subscription.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(Subject),nextHandle=1,tasksByHandle={};function runIfPresent(e){var t=tasksByHandle[e];t&&t()}var Immediate={setImmediate:function(e){var t=nextHandle++;return tasksByHandle[t]=e,Promise.resolve().then(function(){return runIfPresent(t)}),t},clearImmediate:function(e){delete tasksByHandle[e]}},AsapAction=function(r){function e(e,t){var n=r.call(this,e,t)||this;return n.scheduler=e,n.work=t,n}return __extends(e,r),e.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),null!==n&&0<n?r.prototype.requestAsyncId.call(this,e,t,n):(e.actions.push(this),e.scheduled||(e.scheduled=Immediate.setImmediate(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&0<n||null===n&&0<this.delay)return r.prototype.recycleAsyncId.call(this,e,t,n);0===e.actions.length&&(Immediate.clearImmediate(t),e.scheduled=void 0)},e}(AsyncAction),AsapScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(AsyncScheduler),asap=new AsapScheduler(AsapAction),async=new AsyncScheduler(AsyncAction),AnimationFrameAction=function(r){function e(e,t){var n=r.call(this,e,t)||this;return n.scheduler=e,n.work=t,n}return __extends(e,r),e.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),null!==n&&0<n?r.prototype.requestAsyncId.call(this,e,t,n):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&0<n||null===n&&0<this.delay)return r.prototype.recycleAsyncId.call(this,e,t,n);0===e.actions.length&&(cancelAnimationFrame(t),e.scheduled=void 0)},e}(AsyncAction),AnimationFrameScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(AsyncScheduler),animationFrame=new AnimationFrameScheduler(AnimationFrameAction),VirtualTimeScheduler=function(r){function e(e,t){void 0===e&&(e=VirtualAction),void 0===t&&(t=Number.POSITIVE_INFINITY);var n=r.call(this,e,function(){return n.frame})||this;return n.maxFrames=t,n.frame=0,n.index=-1,n}return __extends(e,r),e.prototype.flush=function(){for(var e,t,n=this.actions,r=this.maxFrames;(t=n.shift())&&(this.frame=t.delay)<=r&&!(e=t.execute(t.state,t.delay)););if(e){for(;t=n.shift();)t.unsubscribe();throw e}},e.frameTimeFactor=10,e}(AsyncScheduler),VirtualAction=function(i){function o(e,t,n){void 0===n&&(n=e.index+=1);var r=i.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.index=n,r.active=!0,r.index=e.index=n,r}return __extends(o,i),o.prototype.schedule=function(e,t){if(void 0===t&&(t=0),!this.id)return i.prototype.schedule.call(this,e,t);this.active=!1;var n=new o(this.scheduler,this.work);return this.add(n),n.schedule(e,t)},o.prototype.requestAsyncId=function(e,t,n){void 0===n&&(n=0),this.delay=e.frame+n;var r=e.actions;return r.push(this),r.sort(o.sortActions),!0},o.prototype.recycleAsyncId=function(e,t,n){void 0===n&&(n=0)},o.prototype._execute=function(e,t){if(!0===this.active)return i.prototype._execute.call(this,e,t)},o.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},o}(AsyncAction),ArgumentOutOfRangeError=function(t){function n(){var e=t.call(this,"argument out of range")||this;return e.name="ArgumentOutOfRangeError",Object.setPrototypeOf(e,n.prototype),e}return __extends(n,t),n}(Error),EmptyError=function(t){function n(){var e=t.call(this,"no elements in sequence")||this;return e.name="EmptyError",Object.setPrototypeOf(e,n.prototype),e}return __extends(n,t),n}(Error),TimeoutError=function(t){function n(){var e=t.call(this,"Timeout has occurred")||this;return Object.setPrototypeOf(e,n.prototype),e}return __extends(n,t),n}(Error),MapSubscriber=function(i){function e(e,t,n){var r=i.call(this,e)||this;return r.project=t,r.count=0,r.thisArg=n||r,r}return __extends(e,i),e.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},e}(Subscriber),OuterSubscriber=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.notifyNext=function(e,t,n,r,i){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(Subscriber),InnerSubscriber=function(i){function e(e,t,n){var r=i.call(this)||this;return r.parent=e,r.outerValue=t,r.outerIndex=n,r.index=0,r}return __extends(e,i),e.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},e.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(Subscriber),subscribeToPromise=function(e){return function(t){return e.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,hostReportError),t}};function getSymbolIterator(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var iterator=getSymbolIterator(),subscribeToIterable=function(r){return function(e){for(var t=r[iterator]();;){var n=t.next();if(n.done){e.complete();break}if(e.next(n.value),e.closed)break}return"function"==typeof t.return&&e.add(function(){t.return&&t.return()}),e}},subscribeToObservable=function(n){return function(e){var t=n[observable]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(e)}},isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function isPromise(e){return e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var subscribeTo=function(t){if(t instanceof Observable)return function(e){return t._isScalar?(e.next(t.value),void e.complete()):t.subscribe(e)};if(isArrayLike(t))return subscribeToArray(t);if(isPromise(t))return subscribeToPromise(t);if(t&&"function"==typeof t[iterator])return subscribeToIterable(t);if(t&&"function"==typeof t[observable])return subscribeToObservable(t);var e=isObject(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+e+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function subscribeToResult(e,t,n,r){var i=new InnerSubscriber(e,n,r);return subscribeTo(t)(i)}var NONE={},CombineLatestSubscriber=function(r){function e(e,t){var n=r.call(this,e)||this;return n.resultSelector=t,n.active=0,n.values=[],n.observables=[],n}return __extends(e,r),e.prototype._next=function(e){this.values.push(NONE),this.observables.push(e)},e.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.active=t,this.toRespond=t;for(var n=0;n<t;n++){var r=e[n];this.add(subscribeToResult(this,r,r,n))}}},e.prototype.notifyComplete=function(e){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(e,t,n,r,i){var o=this.values,s=o[n],c=this.toRespond?s===NONE?--this.toRespond:this.toRespond:0;o[n]=t,0===c&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},e}(OuterSubscriber),MergeMapSubscriber=function(i){function e(e,t,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var r=i.call(this,e)||this;return r.project=t,r.concurrent=n,r.hasCompleted=!1,r.buffer=[],r.active=0,r.index=0,r}return __extends(e,i),e.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},e.prototype._tryNext=function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t,e,n)},e.prototype._innerSub=function(e,t,n){this.add(subscribeToResult(this,e,t,n))},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},e.prototype.notifyNext=function(e,t,n,r,i){this.destination.next(t)},e.prototype.notifyComplete=function(e){var t=this.buffer;this.remove(e),this.active--,0<t.length?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(OuterSubscriber),ForkJoinSubscriber=function(s){function e(e,t){var n=s.call(this,e)||this;n.sources=t,n.completed=0,n.haveValues=0;var r=t.length;n.values=new Array(r);for(var i=0;i<r;i++){var o=subscribeToResult(n,t[i],null,i);o&&n.add(o)}return n}return __extends(e,s),e.prototype.notifyNext=function(e,t,n,r,i){this.values[n]=t,i._hasValue||(i._hasValue=!0,this.haveValues++)},e.prototype.notifyComplete=function(e){var t=this.destination,n=this.haveValues,r=this.values,i=r.length;e._hasValue?(this.completed++,this.completed===i&&(n===i&&t.next(r),t.complete())):t.complete()},e}(OuterSubscriber),RaceSubscriber=function(n){function e(e){var t=n.call(this,e)||this;return t.hasFirst=!1,t.observables=[],t.subscriptions=[],t}return __extends(e,n),e.prototype._next=function(e){this.observables.push(e)},e.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{for(var n=0;n<t&&!this.hasFirst;n++){var r=e[n],i=subscribeToResult(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(e,t,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(t)},e}(OuterSubscriber),ZipSubscriber=function(i){function e(e,t,n){void 0===n&&(n=Object.create(null));var r=i.call(this,e)||this;return r.iterators=[],r.active=0,r.resultSelector="function"==typeof t?t:null,r.values=n,r}return __extends(e,i),e.prototype._next=function(e){var t=this.iterators;isArray(e)?t.push(new StaticArrayIterator(e)):"function"==typeof e[iterator]?t.push(new StaticIterator(e[iterator]())):t.push(new ZipBufferIterator(this.destination,this,e))},e.prototype._complete=function(){var e=this.iterators,t=e.length;if(0!==t){this.active=t;for(var n=0;n<t;n++){var r=e[n];r.stillUnsubscribed?this.add(r.subscribe(r,n)):this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,n=this.destination,r=0;r<t;r++){if("function"==typeof(s=e[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<t;r++){var s,c=(s=e[r]).next();if(s.hasCompleted()&&(i=!0),c.done)return void n.complete();o.push(c.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},e}(Subscriber),StaticIterator=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return e&&e.done},e}(),StaticArrayIterator=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length}return e.prototype[iterator]=function(){return this},e.prototype.next=function(e){var t=this.index++,n=this.array;return t<this.length?{value:n[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),ZipBufferIterator=function(i){function e(e,t,n){var r=i.call(this,e)||this;return r.parent=t,r.observable=n,r.stillUnsubscribed=!0,r.buffer=[],r.isComplete=!1,r}return __extends(e,i),e.prototype[iterator]=function(){return this},e.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},e.prototype.hasValue=function(){return 0<this.buffer.length},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){0<this.buffer.length?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(e,t,n,r,i){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(e,t){return subscribeToResult(this,this.observable,this,t)},e}(OuterSubscriber);function __extends$1(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var Annyang=function(){function e(){var n=this;this.convertRequst$=new Subject,this.activated$=new BehaviorSubject(!1),this.annyang=window.annyang,this.commands={"*one *currencyFrom to *currencyTo":function(){return n.CommandMatch1},"*one *two *currencyFrom to *currencyTo":function(){return n.CommandMatch2},"*one *two *two *currencyFrom to *currencyTo":function(){return n.CommandMatch3},"*one_and_currencyFrom to *currencyTo":function(e,t){return n.CommandMatch0(e,t)}},this.annyang.addCommands(this.commands),this.annyang.addCallback("error",function(){return n.abort()}),this.annyang.addCallback("errorNetwork",function(){return n.abort()}),this.annyang.addCallback("errorPermissionBlocked",function(){return n.abort()}),this.annyang.addCallback("errorPermissionDenied",function(){return n.abort()}),this.annyang.addCallback("end",function(){return n.abort()}),this.annyang.addCallback("result",function(){return n.abort()}),this.annyang.addCallback("resultMatch",function(){return n.abort()})}return e.prototype.start=function(){this.annyang&&(this.annyang.isListening()&&this.abort(),this.annyang.start({autoRestart:!0,continuous:!1}),this.activated$.next(!0))},e.prototype.abort=function(){this.annyang&&(this.annyang.abort(),this.activated$.next(!1))},e.prototype.CommandMatch0=function(e,t){var n,r,i;if(0===e.indexOf("$"))n=e.replace("$",""),r=parseInt(n,2),i="USD";else{if(0!==e.indexOf("€"))return;n=e.replace("€",""),r=parseInt(n,2),i="EUR"}if(r.toString()===n){var o={amount:r,currencyFrom:i,currencyTo:t};o.currencyTo="euro"===o.currencyTo?"EUR":o.currencyTo,this.convertRequst$.next(o)}},e.prototype.CommandMatch1=function(e,t,n){},e.prototype.CommandMatch2=function(e,t,n,r){},e.prototype.CommandMatch3=function(e,t,n,r,i){},e}(),Converter=function(){function e(e,t,n){var r=this;this.dom=e,this.annyang=t,this.dataCollector=n,this.annyang.convertRequst$.subscribe(function(e){return r.convert(e)}),this.dom.convertRequst$.subscribe(function(e){return r.convert(e)})}return e.prototype.convert=function(e){var t=this.dataCollector.rates[e.currencyFrom],n=this.dataCollector.rates[e.currencyTo],r=e.amount*(n/t);return this.dom.elements.get("result").innerHTML=r.toFixed(2),r},e}(),DataCollector=function(){function e(e){this.dexye=e,this.fetchRates()}return e.prototype.fetchRates=function(){var n=this;this.dexye.getLatestResponce().then(function(e){return{last:e,isValid:n.dexye.isCachedDataValid(e)}}).then(function(t){if(t.isValid)return n.rates=t.last.rates;fetch("http://data.fixer.io/api/latest?access_key=8d981abfaca9f2e4162521b9ecf540db").then(function(e){return e.json()}).then(function(e){n.rates=n.dexye.latestResponce(e,t.last).rates}).catch(function(){n.rates=t.last.rates})})},e}(),keys=Object.keys,isArray$1=Array.isArray,_global="undefined"!=typeof self?self:"undefined"!=typeof window?window:global;function extend(t,n){return"object"!=typeof n||keys(n).forEach(function(e){t[e]=n[e]}),t}var getProto=Object.getPrototypeOf,_hasOwn={}.hasOwnProperty;function hasOwn(e,t){return _hasOwn.call(e,t)}function props(t,n){"function"==typeof n&&(n=n(getProto(t))),keys(n).forEach(function(e){setProp(t,e,n[e])})}var defineProperty=Object.defineProperty;function setProp(e,t,n,r){defineProperty(e,t,extend(n&&hasOwn(n,"get")&&"function"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function derive(t){return{from:function(e){return t.prototype=Object.create(e.prototype),setProp(t.prototype,"constructor",t),{extend:props.bind(null,t.prototype)}}}}var getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor;function getPropertyDescriptor(e,t){var n;return getOwnPropertyDescriptor(e,t)||(n=getProto(e))&&getPropertyDescriptor(n,t)}var _slice=[].slice;function slice(e,t,n){return _slice.call(e,t,n)}function override(e,t){return t(e)}function assert(e){if(!e)throw new Error("Assertion Failed")}function asap$1(e){_global.setImmediate?setImmediate(e):setTimeout(e,0)}function arrayToObject(e,i){return e.reduce(function(e,t,n){var r=i(t,n);return r&&(e[r[0]]=r[1]),e},{})}function trycatcher(e,t){return function(){try{e.apply(this,arguments)}catch(e){t(e)}}}function tryCatch$1(e,t,n){try{e.apply(null,n)}catch(e){t&&t(e)}}function getByKeyPath(e,t){if(hasOwn(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var n=[],r=0,i=t.length;r<i;++r){var o=getByKeyPath(e,t[r]);n.push(o)}return n}var s=t.indexOf(".");if(-1!==s){var c=e[t.substr(0,s)];return void 0===c?void 0:getByKeyPath(c,t.substr(s+1))}}function setByKeyPath(e,t,n){if(e&&void 0!==t&&!("isFrozen"in Object&&Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){assert("string"!=typeof n&&"length"in n);for(var r=0,i=t.length;r<i;++r)setByKeyPath(e,t[r],n[r])}else{var o=t.indexOf(".");if(-1!==o){var s=t.substr(0,o),c=t.substr(o+1);if(""===c)void 0===n?delete e[s]:e[s]=n;else{var u=e[s];u||(u=e[s]={}),setByKeyPath(u,c,n)}}else void 0===n?delete e[t]:e[t]=n}}function delByKeyPath(t,e){"string"==typeof e?setByKeyPath(t,e,void 0):"length"in e&&[].map.call(e,function(e){setByKeyPath(t,e,void 0)})}function shallowClone(e){var t={};for(var n in e)hasOwn(e,n)&&(t[n]=e[n]);return t}var concat$1=[].concat;function flatten(e){return concat$1.apply([],e)}var intrinsicTypes="Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set".split(",").concat(flatten([8,16,32,64].map(function(t){return["Int","Uint","Float"].map(function(e){return e+t+"Array"})}))).filter(function(e){return _global[e]}).map(function(e){return _global[e]});function deepClone(e){if(!e||"object"!=typeof e)return e;var t;if(isArray$1(e)){t=[];for(var n=0,r=e.length;n<r;++n)t.push(deepClone(e[n]))}else if(0<=intrinsicTypes.indexOf(e.constructor))t=e;else for(var i in t=e.constructor?Object.create(e.constructor.prototype):{},e)hasOwn(e,i)&&(t[i]=deepClone(e[i]));return t}function getObjectDiff(r,i,o,s){return o=o||{},s=s||"",keys(r).forEach(function(e){if(hasOwn(i,e)){var t=r[e],n=i[e];"object"==typeof t&&"object"==typeof n&&t&&n&&""+t.constructor==""+n.constructor?getObjectDiff(t,n,o,s+e+"."):t!==n&&(o[s+e]=i[e])}else o[s+e]=void 0}),keys(i).forEach(function(e){hasOwn(r,e)||(o[s+e]=i[e])}),o}var iteratorSymbol="undefined"!=typeof Symbol&&Symbol.iterator,getIteratorOf=iteratorSymbol?function(e){var t;return null!=e&&(t=e[iteratorSymbol])&&t.apply(e)}:function(){return null},NO_CHAR_ARRAY={};function getArrayOf(e){var t,n,r,i;if(1===arguments.length){if(isArray$1(e))return e.slice();if(this===NO_CHAR_ARRAY&&"string"==typeof e)return[e];if(i=getIteratorOf(e)){for(n=[];!(r=i.next()).done;)n.push(r.value);return n}if(null==e)return[e];if("number"==typeof(t=e.length)){for(n=new Array(t);t--;)n[t]=e[t];return n}return[e]}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}var debug="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function setDebug(e,t){debug=e,libraryFilter=t}var libraryFilter=function(){return!0},NEEDS_THROW_FOR_STACK=!new Error("").stack;function getErrorWithStack(){if(NEEDS_THROW_FOR_STACK)try{throw new Error}catch(e){return e}return new Error}function prettyStack(e,t){var n=e.stack;return n?(t=t||0,0===n.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),n.split("\n").slice(t).filter(libraryFilter).map(function(e){return"\n"+e}).join("")):""}function deprecated(e,t){return function(){return console.warn(e+" is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. "+prettyStack(getErrorWithStack(),1)),t.apply(this,arguments)}}var dexieErrorNames=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"],idbDomErrorNames=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],errorList=dexieErrorNames.concat(idbDomErrorNames),defaultTexts={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed"};function DexieError(e,t){this._e=getErrorWithStack(),this.name=e,this.message=t}function getMultiErrorMessage(e,t){return e+". Errors: "+t.map(function(e){return e.toString()}).filter(function(e,t,n){return n.indexOf(e)===t}).join("\n")}function ModifyError(e,t,n,r){this._e=getErrorWithStack(),this.failures=t,this.failedKeys=r,this.successCount=n}function BulkError(e,t){this._e=getErrorWithStack(),this.name="BulkError",this.failures=t,this.message=getMultiErrorMessage(e,t)}derive(DexieError).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+prettyStack(this._e,2))}},toString:function(){return this.name+": "+this.message}}),derive(ModifyError).from(DexieError),derive(BulkError).from(DexieError);var errnames=errorList.reduce(function(e,t){return e[t]=t+"Error",e},{}),BaseException=DexieError,exceptions=errorList.reduce(function(e,n){var r=n+"Error";function t(e,t){this._e=getErrorWithStack(),this.name=r,e?"string"==typeof e?(this.message=e,this.inner=t||null):"object"==typeof e&&(this.message=e.name+" "+e.message,this.inner=e):(this.message=defaultTexts[n]||r,this.inner=null)}return derive(t).from(BaseException),e[n]=t,e},{});exceptions.Syntax=SyntaxError,exceptions.Type=TypeError,exceptions.Range=RangeError;var exceptionMap=idbDomErrorNames.reduce(function(e,t){return e[t+"Error"]=exceptions[t],e},{});function mapError(e,t){if(!e||e instanceof DexieError||e instanceof TypeError||e instanceof SyntaxError||!e.name||!exceptionMap[e.name])return e;var n=new exceptionMap[e.name](t||e.message,e);return"stack"in e&&setProp(n,"stack",{get:function(){return this.inner.stack}}),n}var fullNameExceptions=errorList.reduce(function(e,t){return-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=exceptions[t]),e},{});function nop(){}function mirror(e){return e}function pureFunctionChain(t,n){return null==t||t===mirror?n:function(e){return n(t(e))}}function callBoth(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function hookCreatingChain(i,o){return i===nop?o:function(){var e=i.apply(this,arguments);void 0!==e&&(arguments[0]=e);var t=this.onsuccess,n=this.onerror;this.onsuccess=null,this.onerror=null;var r=o.apply(this,arguments);return t&&(this.onsuccess=this.onsuccess?callBoth(t,this.onsuccess):t),n&&(this.onerror=this.onerror?callBoth(n,this.onerror):n),void 0!==r?r:e}}function hookDeletingChain(n,r){return n===nop?r:function(){n.apply(this,arguments);var e=this.onsuccess,t=this.onerror;this.onsuccess=this.onerror=null,r.apply(this,arguments),e&&(this.onsuccess=this.onsuccess?callBoth(e,this.onsuccess):e),t&&(this.onerror=this.onerror?callBoth(t,this.onerror):t)}}function hookUpdatingChain(o,s){return o===nop?s:function(e){var t=o.apply(this,arguments);extend(e,t);var n=this.onsuccess,r=this.onerror;this.onsuccess=null,this.onerror=null;var i=s.apply(this,arguments);return n&&(this.onsuccess=this.onsuccess?callBoth(n,this.onsuccess):n),r&&(this.onerror=this.onerror?callBoth(r,this.onerror):r),void 0===t?void 0===i?void 0:i:extend(t,i)}}function reverseStoppableEventChain(e,t){return e===nop?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function promisableChain(i,o){return i===nop?o:function(){var e=i.apply(this,arguments);if(e&&"function"==typeof e.then){for(var t=this,n=arguments.length,r=new Array(n);n--;)r[n]=arguments[n];return e.then(function(){return o.apply(t,r)})}return o.apply(this,arguments)}}fullNameExceptions.ModifyError=ModifyError,fullNameExceptions.DexieError=DexieError,fullNameExceptions.BulkError=BulkError;var INTERNAL={},LONG_STACKS_CLIP_LIMIT=100,MAX_LONG_STACKS=20,ZONE_ECHO_LIMIT=7,nativePromiseInstanceAndProto=function(){try{return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")()}catch(e){var t=_global.Promise;return t?[t.resolve(),t.prototype,t.resolve()]:[]}}(),resolvedNativePromise=nativePromiseInstanceAndProto[0],nativePromiseProto=nativePromiseInstanceAndProto[1],resolvedGlobalPromise=nativePromiseInstanceAndProto[2],nativePromiseThen=nativePromiseProto&&nativePromiseProto.then,NativePromise=resolvedNativePromise&&resolvedNativePromise.constructor,AsyncFunction=nativePromiseInstanceAndProto[3],patchGlobalPromise=!!resolvedGlobalPromise,stack_being_generated=!1,schedulePhysicalTick=resolvedGlobalPromise?function(){resolvedGlobalPromise.then(physicalTick)}:_global.setImmediate?setImmediate.bind(null,physicalTick):_global.MutationObserver?function(){var e=document.createElement("div");new MutationObserver(function(){physicalTick(),e=null}).observe(e,{attributes:!0}),e.setAttribute("i","1")}:function(){setTimeout(physicalTick,0)},asap$1$1=function(e,t){microtickQueue.push([e,t]),needsNewPhysicalTick&&(schedulePhysicalTick(),needsNewPhysicalTick=!1)},isOutsideMicroTick=!0,needsNewPhysicalTick=!0,unhandledErrors=[],rejectingErrors=[],currentFulfiller=null,rejectionMapper=mirror,globalPSD={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:globalError,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach(function(e){try{globalError(e[0],e[1])}catch(e){}})}},PSD=globalPSD,microtickQueue=[],numScheduledCalls=0,tickFinalizers=[];function Promise$1(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=nop,this._lib=!1;var t=this._PSD=PSD;if(debug&&(this._stackHolder=getErrorWithStack(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==INTERNAL)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&handleRejection(this,this._value))}this._state=null,this._value=null,++t.ref,executePromiseTask(this,e)}var thenProp={get:function(){var s=PSD,t=totalEchoes;function e(n,r){var i=this,o=!s.global&&(s!==PSD||t!==totalEchoes);o&&decrementExpectedAwaits();var e=new Promise$1(function(e,t){propagateToListener(i,new Listener(nativeAwaitCompatibleWrap(n,s,o),nativeAwaitCompatibleWrap(r,s,o),e,t,s))});return debug&&linkToPreviousPromise(e,this),e}return e.prototype=INTERNAL,e},set:function(e){setProp(this,"then",e&&e.prototype===INTERNAL?thenProp:{get:function(){return e},set:thenProp.set})}};function Listener(e,t,n,r,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=i}function executePromiseTask(t,e){try{e(function(n){if(null===t._state){if(n===t)throw new TypeError("A promise cannot be resolved with itself.");var e=t._lib&&beginMicroTickScope();n&&"function"==typeof n.then?executePromiseTask(t,function(e,t){n instanceof Promise$1?n._then(e,t):n.then(e,t)}):(t._state=!0,t._value=n,propagateAllListeners(t)),e&&endMicroTickScope()}},handleRejection.bind(null,t))}catch(e){handleRejection(t,e)}}function handleRejection(t,n){if(rejectingErrors.push(n),null===t._state){var e=t._lib&&beginMicroTickScope();n=rejectionMapper(n),t._state=!1,t._value=n,debug&&null!==n&&"object"==typeof n&&!n._promise&&tryCatch$1(function(){var e=getPropertyDescriptor(n,"stack");n._promise=t,setProp(n,"stack",{get:function(){return stack_being_generated?e&&(e.get?e.get.apply(n):e.value):t.stack}})}),addPossiblyUnhandledError(t),propagateAllListeners(t),e&&endMicroTickScope()}}function propagateAllListeners(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)propagateToListener(e,t[n]);var i=e._PSD;--i.ref||i.finalize(),0===numScheduledCalls&&(++numScheduledCalls,asap$1$1(function(){0==--numScheduledCalls&&finalizePhysicalTick()},[]))}function propagateToListener(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++numScheduledCalls,asap$1$1(callListener,[n,e,t])}else e._listeners.push(t)}function callListener(e,t,n){try{var r,i=(currentFulfiller=t)._value;t._state?r=e(i):(rejectingErrors.length&&(rejectingErrors=[]),r=e(i),-1===rejectingErrors.indexOf(i)&&markErrorAsHandled(t)),n.resolve(r)}catch(e){n.reject(e)}finally{currentFulfiller=null,0==--numScheduledCalls&&finalizePhysicalTick(),--n.psd.ref||n.psd.finalize()}}function getStack(e,t,n){if(t.length===n)return t;var r="";if(!1===e._state){var i,o,s=e._value;null!=s?(i=s.name||"Error",o=s.message||s,r=prettyStack(s,0)):(i=s,o=""),t.push(i+(o?": "+o:"")+r)}return debug&&((r=prettyStack(e._stackHolder,2))&&-1===t.indexOf(r)&&t.push(r),e._prev&&getStack(e._prev,t,n)),t}function linkToPreviousPromise(e,t){var n=t?t._numPrev+1:0;n<LONG_STACKS_CLIP_LIMIT&&(e._prev=t,e._numPrev=n)}function physicalTick(){beginMicroTickScope()&&endMicroTickScope()}function beginMicroTickScope(){var e=isOutsideMicroTick;return needsNewPhysicalTick=isOutsideMicroTick=!1,e}function endMicroTickScope(){var e,t,n;do{for(;0<microtickQueue.length;)for(e=microtickQueue,microtickQueue=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(0<microtickQueue.length);needsNewPhysicalTick=isOutsideMicroTick=!0}function finalizePhysicalTick(){var e=unhandledErrors;unhandledErrors=[],e.forEach(function(e){e._PSD.onunhandled.call(null,e._value,e)});for(var t=tickFinalizers.slice(0),n=t.length;n;)t[--n]()}function run_at_end_of_this_or_next_physical_tick(t){tickFinalizers.push(function e(){t(),tickFinalizers.splice(tickFinalizers.indexOf(e),1)}),++numScheduledCalls,asap$1$1(function(){0==--numScheduledCalls&&finalizePhysicalTick()},[])}function addPossiblyUnhandledError(t){unhandledErrors.some(function(e){return e._value===t._value})||unhandledErrors.push(t)}function markErrorAsHandled(e){for(var t=unhandledErrors.length;t;)if(unhandledErrors[--t]._value===e._value)return void unhandledErrors.splice(t,1)}function PromiseReject(e){return new Promise$1(INTERNAL,!1,e)}function wrap(n,r){var i=PSD;return function(){var e=beginMicroTickScope(),t=PSD;try{return switchToZone(i,!0),n.apply(this,arguments)}catch(e){r&&r(e)}finally{switchToZone(t,!1),e&&endMicroTickScope()}}}props(Promise$1.prototype,{then:thenProp,_then:function(e,t){propagateToListener(this,new Listener(null,null,e,t,PSD))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=e,n=arguments[1];return"function"==typeof t?this.then(null,function(e){return e instanceof t?n(e):PromiseReject(e)}):this.then(null,function(e){return e&&e.name===t?n(e):PromiseReject(e)})},finally:function(t){return this.then(function(e){return t(),e},function(e){return t(),PromiseReject(e)})},stack:{get:function(){if(this._stack)return this._stack;try{stack_being_generated=!0;var e=getStack(this,[],MAX_LONG_STACKS).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{stack_being_generated=!1}}},timeout:function(r,i){var o=this;return r<1/0?new Promise$1(function(e,t){var n=setTimeout(function(){return t(new exceptions.Timeout(i))},r);o.then(e,t).finally(clearTimeout.bind(null,n))}):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&setProp(Promise$1.prototype,Symbol.toStringTag,"Promise"),globalPSD.env=snapShot(),props(Promise$1,{all:function(){var o=getArrayOf.apply(null,arguments).map(onPossibleParallellAsync);return new Promise$1(function(n,r){0===o.length&&n([]);var i=o.length;o.forEach(function(e,t){return Promise$1.resolve(e).then(function(e){o[t]=e,--i||n(o)},r)})})},resolve:function(n){if(n instanceof Promise$1)return n;if(n&&"function"==typeof n.then)return new Promise$1(function(e,t){n.then(e,t)});var e=new Promise$1(INTERNAL,!0,n);return linkToPreviousPromise(e,currentFulfiller),e},reject:PromiseReject,race:function(){var e=getArrayOf.apply(null,arguments).map(onPossibleParallellAsync);return new Promise$1(function(t,n){e.map(function(e){return Promise$1.resolve(e).then(t,n)})})},PSD:{get:function(){return PSD},set:function(e){return PSD=e}},newPSD:newScope,usePSD:usePSD,scheduler:{get:function(){return asap$1$1},set:function(e){asap$1$1=e}},rejectionMapper:{get:function(){return rejectionMapper},set:function(e){rejectionMapper=e}},follow:function(r,n){return new Promise$1(function(e,t){return newScope(function(t,n){var e=PSD;e.unhandleds=[],e.onunhandled=n,e.finalize=callBoth(function(){var e=this;run_at_end_of_this_or_next_physical_tick(function(){0===e.unhandleds.length?t():n(e.unhandleds[0])})},e.finalize),r()},n,e,t)})}});var task={awaits:0,echoes:0,id:0},taskCounter=0,zoneStack=[],zoneEchoes=0,totalEchoes=0,zone_id_counter=0;function newScope(e,t,n,r){var i=PSD,o=Object.create(i);o.parent=i,o.ref=0,o.global=!1,o.id=++zone_id_counter;var s=globalPSD.env;o.env=patchGlobalPromise?{Promise:Promise$1,PromiseProp:{value:Promise$1,configurable:!0,writable:!0},all:Promise$1.all,race:Promise$1.race,resolve:Promise$1.resolve,reject:Promise$1.reject,nthen:getPatchedPromiseThen(s.nthen,o),gthen:getPatchedPromiseThen(s.gthen,o)}:{},t&&extend(o,t),++i.ref,o.finalize=function(){--this.parent.ref||this.parent.finalize()};var c=usePSD(o,e,n,r);return 0===o.ref&&o.finalize(),c}function incrementExpectedAwaits(){return task.id||(task.id=++taskCounter),++task.awaits,task.echoes+=ZONE_ECHO_LIMIT,task.id}function decrementExpectedAwaits(e){!task.awaits||e&&e!==task.id||(0==--task.awaits&&(task.id=0),task.echoes=task.awaits*ZONE_ECHO_LIMIT)}function onPossibleParallellAsync(e){return task.echoes&&e&&e.constructor===NativePromise?(incrementExpectedAwaits(),e.then(function(e){return decrementExpectedAwaits(),e},function(e){return decrementExpectedAwaits(),rejection(e)})):e}function zoneEnterEcho(e){++totalEchoes,task.echoes&&0!=--task.echoes||(task.echoes=task.id=0),zoneStack.push(PSD),switchToZone(e,!0)}function zoneLeaveEcho(){var e=zoneStack[zoneStack.length-1];zoneStack.pop(),switchToZone(e,!1)}function switchToZone(e,t){var n=PSD;if((t?!task.echoes||zoneEchoes++&&e===PSD:!zoneEchoes||--zoneEchoes&&e===PSD)||enqueueNativeMicroTask(t?zoneEnterEcho.bind(null,e):zoneLeaveEcho),e!==PSD&&(PSD=e,n===globalPSD&&(globalPSD.env=snapShot()),patchGlobalPromise)){var r=globalPSD.env.Promise,i=e.env;nativePromiseProto.then=i.nthen,r.prototype.then=i.gthen,(n.global||e.global)&&(Object.defineProperty(_global,"Promise",i.PromiseProp),r.all=i.all,r.race=i.race,r.resolve=i.resolve,r.reject=i.reject)}}function snapShot(){var e=_global.Promise;return patchGlobalPromise?{Promise:e,PromiseProp:Object.getOwnPropertyDescriptor(_global,"Promise"),all:e.all,race:e.race,resolve:e.resolve,reject:e.reject,nthen:nativePromiseProto.then,gthen:e.prototype.then}:{}}function usePSD(e,t,n,r,i){var o=PSD;try{return switchToZone(e,!0),t(n,r,i)}finally{switchToZone(o,!1)}}function enqueueNativeMicroTask(e){nativePromiseThen.call(resolvedNativePromise,e)}function nativeAwaitCompatibleWrap(t,n,r){return"function"!=typeof t?t:function(){var e=PSD;r&&incrementExpectedAwaits(),switchToZone(n,!0);try{return t.apply(this,arguments)}finally{switchToZone(e,!1)}}}function getPatchedPromiseThen(n,r){return function(e,t){return n.call(this,nativeAwaitCompatibleWrap(e,r,!1),nativeAwaitCompatibleWrap(t,r,!1))}}var UNHANDLEDREJECTION="unhandledrejection";function globalError(e,t){var n;try{n=t.onuncatched(e)}catch(e){}if(!1!==n)try{var r,i={promise:t,reason:e};if(_global.document&&document.createEvent?((r=document.createEvent("Event")).initEvent(UNHANDLEDREJECTION,!0,!0),extend(r,i)):_global.CustomEvent&&extend(r=new CustomEvent(UNHANDLEDREJECTION,{detail:i}),i),r&&_global.dispatchEvent&&(dispatchEvent(r),!_global.PromiseRejectionEvent&&_global.onunhandledrejection))try{_global.onunhandledrejection(r)}catch(e){}r.defaultPrevented||console.warn("Unhandled rejection: "+(e.stack||e))}catch(e){}}var rejection=Promise$1.reject;function Events(i){var s={},t=function(e,t){if(t){for(var n=arguments.length,r=new Array(n-1);--n;)r[n-1]=arguments[n];return s[e].subscribe.apply(null,r),i}if("string"==typeof e)return s[e]};t.addEventType=c;for(var e=1,n=arguments.length;e<n;++e)c(arguments[e]);return t;function c(e,n,r){if("object"!=typeof e){var i;n||(n=reverseStoppableEventChain),r||(r=nop);var o={subscribers:[],fire:r,subscribe:function(e){-1===o.subscribers.indexOf(e)&&(o.subscribers.push(e),o.fire=n(o.fire,e))},unsubscribe:function(t){o.subscribers=o.subscribers.filter(function(e){return e!==t}),o.fire=o.subscribers.reduce(n,r)}};return s[e]=t[e]=o,o}keys(i=e).forEach(function(e){var t=i[e];if(isArray$1(t))c(e,i[e][0],i[e][1]);else{if("asap"!==t)throw new exceptions.InvalidArgument("Invalid event config");var n=c(e,mirror,function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];n.subscribers.forEach(function(e){asap$1(function(){e.apply(null,t)})})})}})}}var dbNamesDB,DEXIE_VERSION="{version}",maxString=String.fromCharCode(65535),maxKey=function(){try{return IDBKeyRange.only([[]]),[[]]}catch(e){return maxString}}(),minKey=-1/0,INVALID_KEY_ARGUMENT="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",STRING_EXPECTED="String expected.",connections=[],isIEOrEdge="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),hasIEDeleteObjectStoreBug=isIEOrEdge,hangsOnDeleteLargeKeyRange=isIEOrEdge,dexieStackFrameFilter=function(e){return!/(dexie\.js|dexie\.min\.js)/.test(e)};function Dexie(o,e){var t,n,h,r=Dexie.dependencies,i=extend({addons:Dexie.addons,autoOpen:!0,indexedDB:r.indexedDB,IDBKeyRange:r.IDBKeyRange},e),s=i.addons,c=i.autoOpen,u=i.indexedDB,g=i.IDBKeyRange,l=this._dbSchema={},a=[],f=[],p={},d=null,y=null,b=!1,v=null,m=!1,_="readonly",w="readwrite",x=this,S=new Promise$1(function(e){t=e}),E=new Promise$1(function(e,t){n=t}),P=!0,k=!!getNativeGetDatabaseNamesFn(u);function A(e){this._cfg={version:e,storesSource:null,dbschema:{},tables:{},contentUpgrade:null},this.stores({})}function O(e,t,n){var r=x._createTransaction(w,f,l);r.create(t),r._completion.catch(n);var i=r._reject.bind(r);newScope(function(){PSD.trans=r,0===e?(keys(l).forEach(function(e){T(t,e,l[e].primKey,l[e].indexes)}),Promise$1.follow(function(){return x.on.populate.fire(r)}).catch(i)):function(t,i,o){var n=[],e=a.filter(function(e){return e._cfg.version===t})[0];if(!e)throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");l=x._dbSchema=e._cfg.dbschema;var s=!1;return a.filter(function(e){return e._cfg.version>t}).forEach(function(r){n.push(function(){var e=l,t=r._cfg.dbschema;z(e,o),z(t,o),l=x._dbSchema=t;var n=function(e,t){var n={del:[],add:[],change:[]};for(var r in e)t[r]||n.del.push(r);for(r in t){var i=e[r],o=t[r];if(i){var s={name:r,def:o,recreate:!1,del:[],add:[],change:[]};if(i.primKey.src!==o.primKey.src)s.recreate=!0,n.change.push(s);else{var c=i.idxByName,u=o.idxByName;for(var a in c)u[a]||s.del.push(a);for(a in u){var l=c[a],h=u[a];l?l.src!==h.src&&s.change.push(h):s.add.push(h)}(0<s.del.length||0<s.add.length||0<s.change.length)&&n.change.push(s)}}else n.add.push([r,o])}return n}(e,t);if(n.add.forEach(function(e){T(o,e[0],e[1].primKey,e[1].indexes)}),n.change.forEach(function(e){if(e.recreate)throw new exceptions.Upgrade("Not yet support for changing primary key");var t=o.objectStore(e.name);e.add.forEach(function(e){D(t,e)}),e.change.forEach(function(e){t.deleteIndex(e.name),D(t,e)}),e.del.forEach(function(e){t.deleteIndex(e)})}),r._cfg.contentUpgrade)return s=!0,Promise$1.follow(function(){r._cfg.contentUpgrade(i)})}),n.push(function(e){s&&hasIEDeleteObjectStoreBug||function(e,t){for(var n=0;n<t.db.objectStoreNames.length;++n){var r=t.db.objectStoreNames[n];null==e[r]&&t.db.deleteObjectStore(r)}}(r._cfg.dbschema,e)})}),function e(){return n.length?Promise$1.resolve(n.shift()(i.idbtrans)).then(e):Promise$1.resolve()}().then(function(){var t,n;n=o,keys(t=l).forEach(function(e){n.db.objectStoreNames.contains(e)||T(n,e,t[e].primKey,t[e].indexes)})})}(e,r,t).catch(i)})}function T(e,t,n,r){var i=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach(function(e){D(i,e)}),i}function D(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function j(e,t,n){this.name=e,this.schema=t,this._tx=n,this.hook=p[e]?p[e].hook:Events(null,{creating:[hookCreatingChain,nop],reading:[pureFunctionChain,mirror],updating:[hookUpdatingChain,nop],deleting:[hookDeletingChain,nop]})}function C(t,n,e){return(e?hookedEventRejectHandler:eventRejectHandler)(function(e){t.push(e),n&&n()})}function I(a,l,h,f,p){return new Promise$1(function(r,e){var i=h.length,o=i-1;if(0===i)return r();if(f){var s,c=hookedEventRejectHandler(e),u=hookedEventSuccessHandler(null);tryCatch$1(function(){for(var e=0;e<i;++e){s={onsuccess:null,onerror:null};var t=h[e];p.call(s,t[0],t[1],l);var n=a.delete(t[0]);n._hookCtx=s,n.onerror=c,n.onsuccess=e===o?hookedEventSuccessHandler(r):u}},function(e){throw s.onerror&&s.onerror(e),e})}else for(var t=0;t<i;++t){var n=a.delete(h[t]);n.onerror=eventRejectHandler(e),t===o&&(n.onsuccess=wrap(function(){return r()}))}})}function N(e,t,n,r){var i=this;this.db=x,this.mode=e,this.storeNames=t,this.idbtrans=null,this.on=Events(this,"complete","error","abort"),this.parent=r||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new Promise$1(function(e,t){i._resolve=e,i._reject=t}),this._completion.then(function(){i.active=!1,i.on.complete.fire()},function(e){var t=i.active;return i.active=!1,i.on.error.fire(e),i.parent?i.parent._reject(e):t&&i.idbtrans&&i.idbtrans.abort(),rejection(e)})}function R(e,t,n){this._ctx={table:e,index:":id"===t?null:t,or:n}}function B(e,t){var n=null,r=null;if(t)try{n=t()}catch(e){r=e}var i=e._ctx,o=i.table;this._ctx={table:o,index:i.index,isPrimKey:!i.index||o.schema.primKey.keyPath&&i.index===o.schema.primKey.name,range:n,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:i.or,valueMapper:o.hook.reading.fire}}function F(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function M(e,t){return e._cfg.version-t._cfg.version}function $(e,t,r){t.forEach(function(t){var n=r[t];e.forEach(function(e){t in e||(e===N.prototype||e instanceof N?setProp(e,t,{get:function(){return this.table(t)}}):e[t]=new j(t,n))})})}function K(n,r,i,o,s,c){var u=wrap(c?function(e,t,n){return i(c(e),t,n)}:i,s);n.onerror||(n.onerror=eventRejectHandler(s)),n.onsuccess=trycatcher(r?function(){var e=n.result;if(e){var t=function(){e.continue()};r(e,function(e){t=e},o,s)&&u(e.value,e,function(e){t=e}),t()}else o()}:function(){var e=n.result;if(e){var t=function(){e.continue()};u(e.value,e,function(e){t=e}),t()}else o()},s)}function L(e,t){return u.cmp(e,t)}function H(e,t){return u.cmp(e,t)}function U(e,t){return u.cmp(t,e)}function V(e,t){return e<t?-1:e===t?0:1}function q(e,t){return t<e?-1:e===t?0:1}function W(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}function z(e,t){for(var n=t.db.objectStoreNames,r=0;r<n.length;++r){var i=n[r],o=t.objectStore(i);h="getAll"in o;for(var s=0;s<o.indexNames.length;++s){var c=o.indexNames[s],u=o.index(c).keyPath,a="string"==typeof u?u:"["+slice(u).join("+")+"]";if(e[i]){var l=e[i].idxByName[a];l&&(l.name=c)}}}/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&_global.WorkerGlobalScope&&_global instanceof _global.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(h=!1)}function G(t){x.on("blocked").fire(t),connections.filter(function(e){return e.name===x.name&&e!==x&&!e._vcFired}).map(function(e){return e.on("versionchange").fire(t)})}this.version=function(t){if(d||b)throw new exceptions.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,t);var e=a.filter(function(e){return e._cfg.version===t})[0];return e||(e=new A(t),a.push(e),a.sort(M),P=!1,e)},extend(A.prototype,{stores:function(e){this._cfg.storesSource=this._cfg.storesSource?extend(this._cfg.storesSource,e):e;var t={};a.forEach(function(e){extend(t,e._cfg.storesSource)});var n=this._cfg.dbschema={};return this._parseStoresSpec(t,n),l=x._dbSchema=n,[p,x,N.prototype].forEach(function(e){for(var t in e)e[t]instanceof j&&delete e[t]}),$([p,x,N.prototype,this._cfg.tables],keys(n),n),f=keys(n),this},upgrade:function(e){return this._cfg.contentUpgrade=e,this},_parseStoresSpec:function(s,c){keys(s).forEach(function(e){if(null!==s[e]){var t={},n=(i=s[e],o=[],i.split(",").forEach(function(e){var t=(e=e.trim()).replace(/([&*]|\+\+)/g,""),n=/^\[/.test(t)?t.match(/^\[(.*)\]$/)[1].split("+"):t;o.push(new IndexSpec(t,n||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),isArray$1(n),/\./.test(e)))}),o),r=n.shift();if(r.multi)throw new exceptions.Schema("Primary key cannot be multi-valued");r.keyPath&&setByKeyPath(t,r.keyPath,r.auto?0:r.keyPath),n.forEach(function(e){if(e.auto)throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new exceptions.Schema("Index must have a name and cannot be an empty string");setByKeyPath(t,e.keyPath,e.compound?e.keyPath.map(function(){return""}):"")}),c[e]=new TableSchema(e,r,n,t)}var i,o})}}),this._allTables=p,this._createTransaction=function(e,t,n,r){return new N(e,t,n,r)},this._whenReady=function(e){return m||PSD.letThrough?e():new Promise$1(function(e,t){if(!b){if(!c)return void t(new exceptions.DatabaseClosed);x.open().catch(nop)}S.then(e,t)}).then(e)},this.verno=0,this.open=function(){if(b||d)return S.then(function(){return y?rejection(y):x});debug&&(E._stackHolder=getErrorWithStack()),m=!(b=!0);var e=t,i=y=null;return Promise$1.race([E,new Promise$1(function(e,n){if(!u)throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL (not locally). If using old Safari versions, make sure to include indexedDB polyfill.");var r=P?u.open(o):u.open(o,Math.round(10*x.verno));if(!r)throw new exceptions.MissingAPI("IndexedDB API not available");r.onerror=eventRejectHandler(n),r.onblocked=wrap(G),r.onupgradeneeded=wrap(function(e){if(i=r.transaction,P&&!x._allowEmptyDB){r.onerror=preventDefault,i.abort(),r.result.close();var t=u.deleteDatabase(o);t.onsuccess=t.onerror=wrap(function(){n(new exceptions.NoSuchDatabase("Database "+o+" doesnt exist"))})}else{i.onerror=eventRejectHandler(n),O((e.oldVersion>Math.pow(2,62)?0:e.oldVersion)/10,i,n)}},n),r.onsuccess=wrap(function(){if(i=null,d=r.result,connections.push(x),P)!function(){if(x.verno=d.version/10,x._dbSchema=l={},0===(f=slice(d.objectStoreNames,0)).length)return;var a=d.transaction(safariMultiStoreFix(f),"readonly");f.forEach(function(e){for(var t=a.objectStore(e),n=t.keyPath,r=n&&"string"==typeof n&&-1!==n.indexOf("."),i=new IndexSpec(n,n||"",!1,!1,!!t.autoIncrement,n&&"string"!=typeof n,r),o=[],s=0;s<t.indexNames.length;++s){var c=t.index(t.indexNames[s]);n=c.keyPath,r=n&&"string"==typeof n&&-1!==n.indexOf(".");var u=new IndexSpec(c.name,n,!!c.unique,!!c.multiEntry,!1,n&&"string"!=typeof n,r);o.push(u)}l[e]=new TableSchema(e,i,o,{})}),$([p],keys(l),l)}();else if(0<d.objectStoreNames.length)try{z(l,d.transaction(safariMultiStoreFix(d.objectStoreNames),_))}catch(e){}d.onversionchange=wrap(function(e){x._vcFired=!0,x.on("versionchange").fire(e)}),k||"__dbnames"===o||dbNamesDB.dbnames.put({name:o}).catch(nop),e()},n)})]).then(function(){return v=[],Promise$1.resolve(Dexie.vip(x.on.ready.fire)).then(function e(){if(0<v.length){var t=v.reduce(promisableChain,nop);return v=[],Promise$1.resolve(Dexie.vip(t)).then(e)}})}).finally(function(){v=null}).then(function(){return b=!1,x}).catch(function(e){try{i&&i.abort()}catch(e){}return b=!1,x.close(),rejection(y=e)}).finally(function(){m=!0,e()})},this.close=function(){var e=connections.indexOf(x);if(0<=e&&connections.splice(e,1),d){try{d.close()}catch(e){}d=null}c=!1,y=new exceptions.DatabaseClosed,b&&n(y),S=new Promise$1(function(e){t=e}),E=new Promise$1(function(e,t){n=t})},this.delete=function(){var r=0<arguments.length;return new Promise$1(function(t,n){if(r)throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");function e(){x.close();var e=u.deleteDatabase(o);e.onsuccess=wrap(function(){k||dbNamesDB.dbnames.delete(o).catch(nop),t()}),e.onerror=eventRejectHandler(n),e.onblocked=G}b?S.then(e):e()})},this.backendDB=function(){return d},this.isOpen=function(){return null!==d},this.hasBeenClosed=function(){return y&&y instanceof exceptions.DatabaseClosed},this.hasFailed=function(){return null!==y},this.dynamicallyOpened=function(){return P},this.name=o,props(this,{tables:{get:function(){return keys(p).map(function(e){return p[e]})}}}),this.on=Events(this,"populate","blocked","versionchange",{ready:[promisableChain,nop]}),this.on.ready.subscribe=override(this.on.ready.subscribe,function(n){return function(t,e){Dexie.vip(function(){m?(y||Promise$1.resolve().then(t),e&&n(t)):v?(v.push(t),e&&n(t)):(n(t),e||n(function e(){x.on.ready.unsubscribe(t),x.on.ready.unsubscribe(e)}))})}}),this.transaction=function(){var e=function(e,t,n){var r=arguments.length;if(r<2)throw new exceptions.InvalidArgument("Too few arguments");var i=new Array(r-1);for(;--r;)i[r-1]=arguments[r];n=i.pop();var o=flatten(i);return[e,o,n]}.apply(this,arguments);return this._transaction.apply(this,e)},this._transaction=function(o,e,s){var c=PSD.trans;c&&c.db===x&&-1===o.indexOf("!")||(c=null);var t=-1!==o.indexOf("?");o=o.replace("!","").replace("?","");try{var u=e.map(function(e){var t=e instanceof j?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t});if("r"==o||o==_)o=_;else{if("rw"!=o&&o!=w)throw new exceptions.InvalidArgument("Invalid transaction mode: "+o);o=w}if(c){if(c.mode===_&&o===w){if(!t)throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");c=null}c&&u.forEach(function(e){if(c&&-1===c.storeNames.indexOf(e)){if(!t)throw new exceptions.SubTransaction("Table "+e+" not included in parent transaction.");c=null}}),t&&c&&!c.active&&(c=null)}}catch(n){return c?c._promise(null,function(e,t){t(n)}):rejection(n)}return c?c._promise(o,n,"lock"):PSD.trans?usePSD(PSD.transless,function(){return x._whenReady(n)}):x._whenReady(n);function n(){return Promise$1.resolve().then(function(){var t,e=PSD.transless||PSD,n=x._createTransaction(o,u,l,c),r={trans:n,transless:e};c?n.idbtrans=c.idbtrans:n.create(),s.constructor===AsyncFunction&&incrementExpectedAwaits();var i=Promise$1.follow(function(){if(t=s.call(n,n))if(t.constructor===NativePromise){var e=decrementExpectedAwaits.bind(null,null);t.then(e,e)}else"function"==typeof t.next&&"function"==typeof t.throw&&(t=awaitIterator(t))},r);return(t&&"function"==typeof t.then?Promise$1.resolve(t).then(function(e){return n.active?e:rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))}):i.then(function(){return t})).then(function(e){return c&&n._resolve(),n._completion.then(function(){return e})}).catch(function(e){return n._reject(e),rejection(e)})})}},this.table=function(e){if(!hasOwn(p,e))throw new exceptions.InvalidTable("Table "+e+" does not exist");return p[e]},props(j.prototype,{_trans:function(e,t,n){var r=this._tx||PSD.trans;return r&&r.db===x?r===PSD.trans?r._promise(e,t,n):newScope(function(){return r._promise(e,t,n)},{trans:r,transless:PSD.transless||PSD}):function e(t,n,r){if(m||PSD.letThrough){var i=x._createTransaction(t,n,l);try{i.create()}catch(e){return rejection(e)}return i._promise(t,function(e,t){return newScope(function(){return PSD.trans=i,r(e,t,i)})}).then(function(e){return i._completion.then(function(){return e})})}if(!b){if(!c)return rejection(new exceptions.DatabaseClosed);x.open().catch(nop)}return S.then(function(){return e(t,n,r)})}(e,[this.name],t)},_idbstore:function(e,r,t){var i=this.name;return this._trans(e,function(e,t,n){if(-1===n.storeNames.indexOf(i))throw new exceptions.NotFound("Table"+i+" not part of transaction");return r(e,t,n.idbtrans.objectStore(i),n)},t)},get:function(i,e){if(i&&i.constructor===Object)return this.where(i).first(e);var o=this;return this._idbstore(_,function(e,t,n){var r=n.get(i);r.onerror=eventRejectHandler(t),r.onsuccess=wrap(function(){e(o.hook.reading.fire(r.result))},t)}).then(e)},where:function(n){if("string"==typeof n)return new R(this,n);if(isArray$1(n))return new R(this,"["+n.join("+")+"]");var r=keys(n);if(1===r.length)return this.where(r[0]).equals(n[r[0]]);var e=this.schema.indexes.concat(this.schema.primKey).filter(function(t){return t.compound&&r.every(function(e){return 0<=t.keyPath.indexOf(e)})&&t.keyPath.every(function(e){return 0<=r.indexOf(e)})})[0];if(e&&maxKey!==maxString)return this.where(e.name).equals(e.keyPath.map(function(e){return n[e]}));e||console.warn("The query "+JSON.stringify(n)+" on "+this.name+" would benefit of a compound index ["+r.join("+")+"]");var i=this.schema.idxByName,t=r.reduce(function(e,t){return[e[0]||i[t],e[0]||!i[t]?W(e[1],function(e){return""+getByKeyPath(e,t)==""+n[t]}):e[1]]},[null,null]),o=t[0];return o?this.where(o.name).equals(n[o.keyPath]).filter(t[1]):e?this.filter(t[1]):this.where(r).equals("")},count:function(e){return this.toCollection().count(e)},offset:function(e){return this.toCollection().offset(e)},limit:function(e){return this.toCollection().limit(e)},reverse:function(){return this.toCollection().reverse()},filter:function(e){return this.toCollection().and(e)},each:function(e){return this.toCollection().each(e)},toArray:function(e){return this.toCollection().toArray(e)},orderBy:function(e){return new B(new R(this,isArray$1(e)?"["+e.join("+")+"]":e))},toCollection:function(){return new B(new R(this))},mapToClass:function(r,e){this.schema.mappedClass=r;var t=Object.create(r.prototype);e&&applyStructure(t,e),this.schema.instanceTemplate=t;var n=function(e){if(!e)return e;var t=Object.create(r.prototype);for(var n in e)if(hasOwn(e,n))try{t[n]=e[n]}catch(e){}return t};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=n,this.hook("reading",n),r},defineClass:function(e){return this.mapToClass(Dexie.defineClass(e),e)},bulkDelete:function(i){return this.hook.deleting.fire===nop?this._idbstore(w,function(e,t,n,r){e(I(n,r,i,!1,nop))}):this.where(":id").anyOf(i).delete().then(function(){})},bulkPut:function(p,d){var y=this;return this._idbstore(w,function(t,n,r){if(!r.keyPath&&!y.schema.primKey.auto&&!d)throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");if(r.keyPath&&d)throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(d&&d.length!==p.length)throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");if(0===p.length)return t();var e,i,o=function(e){0===s.length?t(e):n(new BulkError(y.name+".bulkPut(): "+s.length+" of "+c+" operations failed",s))},s=[],c=p.length,u=y;if(y.hook.creating.fire===nop&&y.hook.updating.fire===nop){i=C(s);for(var a=0,l=p.length;a<l;++a)(e=d?r.put(p[a],d[a]):r.put(p[a])).onerror=i;e.onerror=C(s,o),e.onsuccess=eventSuccessHandler(o)}else{var h=d||r.keyPath&&p.map(function(e){return getByKeyPath(e,r.keyPath)}),f=h&&arrayToObject(h,function(e,t){return null!=e&&[e,p[t]]});(h?u.where(":id").anyOf(h.filter(function(e){return null!=e})).modify(function(){this.value=f[this.primKey],f[this.primKey]=null}).catch(ModifyError,function(e){s=e.failures}).then(function(){for(var e=[],t=d&&[],n=h.length-1;0<=n;--n){var r=h[n];(null==r||f[r])&&(e.push(p[n]),d&&t.push(r),null!=r&&(f[r]=null))}return e.reverse(),d&&t.reverse(),u.bulkAdd(e,t)}).then(function(e){var t=h[h.length-1];return null!=t?t:e}):u.bulkAdd(p)).then(o).catch(BulkError,function(e){s=s.concat(e.failures),o()}).catch(n)}},"locked")},bulkAdd:function(d,y){var b=this,v=this.hook.creating.fire;return this._idbstore(w,function(t,n,s,c){if(!s.keyPath&&!b.schema.primKey.auto&&!y)throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");if(s.keyPath&&y)throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(y&&y.length!==d.length)throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");if(0===d.length)return t();function e(e){0===r.length?t(e):n(new BulkError(b.name+".bulkAdd(): "+r.length+" of "+i+" operations failed",r))}var u,a,l,r=[],i=d.length;if(v!==nop){var h,f=s.keyPath;a=C(r,null,!0),l=hookedEventSuccessHandler(null),tryCatch$1(function(){for(var e=0,t=d.length;e<t;++e){h={onerror:null,onsuccess:null};var n=y&&y[e],r=d[e],i=y?n:f?getByKeyPath(r,f):void 0,o=v.call(h,i,r,c);null==i&&null!=o&&(f?setByKeyPath(r=deepClone(r),f,o):n=o),(u=null!=n?s.add(r,n):s.add(r))._hookCtx=h,e<t-1&&(u.onerror=a,h.onsuccess&&(u.onsuccess=l))}},function(e){throw h.onerror&&h.onerror(e),e}),u.onerror=C(r,e,!0),u.onsuccess=hookedEventSuccessHandler(e)}else{a=C(r);for(var o=0,p=d.length;o<p;++o)(u=y?s.add(d[o],y[o]):s.add(d[o])).onerror=a;u.onerror=C(r,e),u.onsuccess=eventSuccessHandler(e)}})},add:function(u,a){var l=this.hook.creating.fire;return this._idbstore(w,function(n,e,r,t){var i={onsuccess:null,onerror:null};if(l!==nop){var o=null!=a?a:r.keyPath?getByKeyPath(u,r.keyPath):void 0,s=l.call(i,o,u,t);null==o&&null!=s&&(r.keyPath?setByKeyPath(u,r.keyPath,s):a=s)}try{var c=null!=a?r.add(u,a):r.add(u);c._hookCtx=i,c.onerror=hookedEventRejectHandler(e),c.onsuccess=hookedEventSuccessHandler(function(e){var t=r.keyPath;t&&setByKeyPath(u,t,e),n(e)})}catch(e){throw i.onerror&&i.onerror(e),e}})},put:function(o,t){var n=this,e=this.hook.creating.fire,r=this.hook.updating.fire;if(e!==nop||r!==nop){var i=this.schema.primKey.keyPath,s=void 0!==t?t:i&&getByKeyPath(o,i);return null==s?this.add(o):(o=deepClone(o),this._trans(w,function(){return n.where(":id").equals(s).modify(function(){this.value=o}).then(function(e){return 0===e?n.add(o,t):s})},"locked"))}return this._idbstore(w,function(n,e,r){var i=void 0!==t?r.put(o,t):r.put(o);i.onerror=eventRejectHandler(e),i.onsuccess=wrap(function(e){var t=r.keyPath;t&&setByKeyPath(o,t,e.target.result),n(i.result)})})},delete:function(i){return this.hook.deleting.subscribers.length?this.where(":id").equals(i).delete():this._idbstore(w,function(e,t,n){var r=n.delete(i);r.onerror=eventRejectHandler(t),r.onsuccess=wrap(function(){e(r.result)})})},clear:function(){return this.hook.deleting.subscribers.length?this.toCollection().delete():this._idbstore(w,function(e,t,n){var r=n.clear();r.onerror=eventRejectHandler(t),r.onsuccess=wrap(function(){e(r.result)})})},update:function(t,n){if("object"!=typeof n||isArray$1(n))throw new exceptions.InvalidArgument("Modifications must be an object.");if("object"!=typeof t||isArray$1(t))return this.where(":id").equals(t).modify(n);keys(n).forEach(function(e){setByKeyPath(t,e,n[e])});var e=getByKeyPath(t,this.schema.primKey.keyPath);return void 0===e?rejection(new exceptions.InvalidArgument("Given object does not contain its primary key")):this.where(":id").equals(e).modify(n)}}),props(N.prototype,{_lock:function(){return assert(!PSD.global),++this._reculock,1!==this._reculock||PSD.global||(PSD.lockOwnerFor=this),this},_unlock:function(){if(assert(!PSD.global),0==--this._reculock)for(PSD.global||(PSD.lockOwnerFor=null);0<this._blockedFuncs.length&&!this._locked();){var e=this._blockedFuncs.shift();try{usePSD(e[1],e[0])}catch(e){}}return this},_locked:function(){return this._reculock&&PSD.lockOwnerFor!==this},create:function(t){var n=this;if(!this.mode)return this;if(assert(!this.idbtrans),!t&&!d)switch(y&&y.name){case"DatabaseClosedError":throw new exceptions.DatabaseClosed(y);case"MissingAPIError":throw new exceptions.MissingAPI(y.message,y);default:throw new exceptions.OpenFailed(y)}if(!this.active)throw new exceptions.TransactionInactive;return assert(null===this._completion._state),(t=this.idbtrans=t||d.transaction(safariMultiStoreFix(this.storeNames),this.mode)).onerror=wrap(function(e){preventDefault(e),n._reject(t.error)}),t.onabort=wrap(function(e){preventDefault(e),n.active&&n._reject(new exceptions.Abort(t.error)),n.active=!1,n.on("abort").fire(e)}),t.oncomplete=wrap(function(){n.active=!1,n._resolve()}),this},_promise:function(n,r,i){var o=this;if(n===w&&this.mode!==w)return rejection(new exceptions.ReadOnly("Transaction is readonly"));if(!this.active)return rejection(new exceptions.TransactionInactive);if(this._locked())return new Promise$1(function(e,t){o._blockedFuncs.push([function(){o._promise(n,r,i).then(e,t)},PSD])});if(i)return newScope(function(){var e=new Promise$1(function(e,t){o._lock();var n=r(e,t,o);n&&n.then&&n.then(e,t)});return e.finally(function(){return o._unlock()}),e._lib=!0,e});var e=new Promise$1(function(e,t){var n=r(e,t,o);n&&n.then&&n.then(e,t)});return e._lib=!0,e},_root:function(){return this.parent?this.parent._root():this},waitFor:function(e){var r=this._root();if(e=Promise$1.resolve(e),r._waitingFor)r._waitingFor=r._waitingFor.then(function(){return e});else{r._waitingFor=e,r._waitingQueue=[];var t=r.idbtrans.objectStore(r.storeNames[0]);!function e(){for(++r._spinCount;r._waitingQueue.length;)r._waitingQueue.shift()();r._waitingFor&&(t.get(-1/0).onsuccess=e)}()}var i=r._waitingFor;return new Promise$1(function(t,n){e.then(function(e){return r._waitingQueue.push(wrap(t.bind(null,e)))},function(e){return r._waitingQueue.push(wrap(n.bind(null,e)))}).finally(function(){r._waitingFor===i&&(r._waitingFor=null)})})},abort:function(){this.active&&this._reject(new exceptions.Abort),this.active=!1},tables:{get:deprecated("Transaction.tables",function(){return p})},table:function(e){return new j(e,x.table(e).schema,this)}}),props(R.prototype,function(){function v(e,t,n){var r=e instanceof R?new B(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function f(e){return new B(e,function(){return g.only("")}).limit(0)}function m(e,t,n,r,i,o){for(var s=Math.min(e.length,r.length),c=-1,u=0;u<s;++u){var a=t[u];if(a!==r[u])return i(e[u],n[u])<0?e.substr(0,u)+n[u]+n.substr(u+1):i(e[u],r[u])<0?e.substr(0,u)+r[u]+n.substr(u+1):0<=c?e.substr(0,c)+t[c]+n.substr(c+1):null;i(e[u],a)<0&&(c=u)}return s<r.length&&"next"===o?e+n.substr(e.length):s<e.length&&"prev"===o?e.substr(0,n.length):c<0?null:e.substr(0,c)+r[c]+n.substr(c+1)}function t(e,u,n,r){var i,a,l,h,f,p,d,y=n.length;if(!n.every(function(e){return"string"==typeof e}))return v(e,STRING_EXPECTED);function t(e){i="next"===e?function(e){return e.toUpperCase()}:function(e){return e.toLowerCase()},a="next"===e?function(e){return e.toLowerCase()}:function(e){return e.toUpperCase()},l="next"===e?V:q;var t=n.map(function(e){return{lower:a(e),upper:i(e)}}).sort(function(e,t){return l(e.lower,t.lower)});h=t.map(function(e){return e.upper}),f=t.map(function(e){return e.lower}),d="next"===(p=e)?"":r}t("next");var o=new B(e,function(){return g.bound(h[0],f[y-1]+r)});o._ondirectionchange=function(e){t(e)};var b=0;return o._addAlgorithm(function(e,t,n){var r=e.key;if("string"!=typeof r)return!1;var i=a(r);if(u(i,f,b))return!0;for(var o=null,s=b;s<y;++s){var c=m(r,i,h[s],f[s],l,p);null===c&&null===o?b=s+1:(null===o||0<l(o,c))&&(o=c)}return t(null!==o?function(){e.continue(o+d)}:n),!1}),o}return{between:function(e,t,n,r){n=!1!==n,r=!0===r;try{return 0<L(e,t)||0===L(e,t)&&(n||r)&&(!n||!r)?f(this):new B(this,function(){return g.bound(e,t,!n,!r)})}catch(e){return v(this,INVALID_KEY_ARGUMENT)}},equals:function(e){return new B(this,function(){return g.only(e)})},above:function(e){return new B(this,function(){return g.lowerBound(e,!0)})},aboveOrEqual:function(e){return new B(this,function(){return g.lowerBound(e)})},below:function(e){return new B(this,function(){return g.upperBound(e,!0)})},belowOrEqual:function(e){return new B(this,function(){return g.upperBound(e)})},startsWith:function(e){return"string"!=typeof e?v(this,STRING_EXPECTED):this.between(e,e+maxString,!0,!0)},startsWithIgnoreCase:function(e){return""===e?this.startsWith(e):t(this,function(e,t){return 0===e.indexOf(t[0])},[e],maxString)},equalsIgnoreCase:function(e){return t(this,function(e,t){return e===t[0]},[e],"")},anyOfIgnoreCase:function(){var e=getArrayOf.apply(NO_CHAR_ARRAY,arguments);return 0===e.length?f(this):t(this,function(e,t){return-1!==t.indexOf(e)},e,"")},startsWithAnyOfIgnoreCase:function(){var e=getArrayOf.apply(NO_CHAR_ARRAY,arguments);return 0===e.length?f(this):t(this,function(t,e){return e.some(function(e){return 0===t.indexOf(e)})},e,maxString)},anyOf:function(){var i=getArrayOf.apply(NO_CHAR_ARRAY,arguments),o=H;try{i.sort(o)}catch(e){return v(this,INVALID_KEY_ARGUMENT)}if(0===i.length)return f(this);var e=new B(this,function(){return g.bound(i[0],i[i.length-1])});e._ondirectionchange=function(e){o="next"===e?H:U,i.sort(o)};var s=0;return e._addAlgorithm(function(e,t,n){for(var r=e.key;0<o(r,i[s]);)if(++s===i.length)return t(n),!1;return 0===o(r,i[s])||(t(function(){e.continue(i[s])}),!1)}),e},notEqual:function(e){return this.inAnyRange([[minKey,e],[e,maxKey]],{includeLowers:!1,includeUppers:!1})},noneOf:function(){var e=getArrayOf.apply(NO_CHAR_ARRAY,arguments);if(0===e.length)return new B(this);try{e.sort(H)}catch(e){return v(this,INVALID_KEY_ARGUMENT)}var t=e.reduce(function(e,t){return e?e.concat([[e[e.length-1][1],t]]):[[minKey,t]]},null);return t.push([e[e.length-1],maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})},inAnyRange:function(e,t){if(0===e.length)return f(this);if(!e.every(function(e){return void 0!==e[0]&&void 0!==e[1]&&H(e[0],e[1])<=0}))return v(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",exceptions.InvalidArgument);var n=!t||!1!==t.includeLowers,r=t&&!0===t.includeUppers;var o,s=H;function i(e,t){return s(e[0],t[0])}try{(o=e.reduce(function(e,t){for(var n=0,r=e.length;n<r;++n){var i=e[n];if(L(t[0],i[1])<0&&0<L(t[1],i[0])){i[0]=(c=i[0],u=t[0],L(c,u)<0?c:u),i[1]=(o=i[1],s=t[1],0<L(o,s)?o:s);break}}var o,s,c,u;return n===r&&e.push(t),e},[])).sort(i)}catch(e){return v(this,INVALID_KEY_ARGUMENT)}var c=0,u=r?function(e){return 0<H(e,o[c][1])}:function(e){return 0<=H(e,o[c][1])},a=n?function(e){return 0<U(e,o[c][0])}:function(e){return 0<=U(e,o[c][0])};var l=u,h=new B(this,function(){return g.bound(o[0][0],o[o.length-1][1],!n,!r)});return h._ondirectionchange=function(e){"next"===e?(l=u,s=H):(l=a,s=U),o.sort(i)},h._addAlgorithm(function(e,t,n){for(var r,i=e.key;l(i);)if(++c===o.length)return t(n),!1;return!u(r=i)&&!a(r)||(0===L(i,o[c][1])||0===L(i,o[c][0])||t(function(){s===H?e.continue(o[c][0]):e.continue(o[c][1])}),!1)}),h},startsWithAnyOf:function(){var e=getArrayOf.apply(NO_CHAR_ARRAY,arguments);return e.every(function(e){return"string"==typeof e})?0===e.length?f(this):this.inAnyRange(e.map(function(e){return[e,e+maxString]})):v(this,"startsWithAnyOf() only works with strings")}}}),props(B.prototype,function(){function o(e,t){e.filter=W(e.filter,t)}function n(e,t,n){var r=e.replayFilter;e.replayFilter=r?function(){return W(r(),t())}:t,e.justLimit=n&&!r}function u(e,t){if(e.isPrimKey)return t;var n=e.table.schema.idxByName[e.index];if(!n)throw new exceptions.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return t.index(n.name)}function l(e,t){var n=u(e,t);return e.keysOnly&&"openKeyCursor"in n?n.openKeyCursor(e.range||null,e.dir+e.unique):n.openCursor(e.range||null,e.dir+e.unique)}function a(n,c,r,u,i){var a=n.replayFilter?W(n.filter,n.replayFilter()):n.filter;n.or?function(){var o={},e=0;function s(){2==++e&&r()}function t(e,t,n){if(!a||a(t,n,s,u)){var r=t.primaryKey,i=""+r;"[object ArrayBuffer]"===i&&(i=""+new Uint8Array(r)),hasOwn(o,i)||(o[i]=!0,c(e,t,n))}}n.or._iterate(t,s,u,i),K(l(n,i),n.algorithm,t,s,u,!n.keysOnly&&n.valueMapper)}():K(l(n,i),W(n.algorithm,a),c,r,u,!n.keysOnly&&n.valueMapper)}return{_read:function(e,t){var n=this._ctx;return n.error?n.table._trans(null,rejection.bind(null,n.error)):n.table._idbstore(_,e).then(t)},_write:function(e){var t=this._ctx;return t.error?t.table._trans(null,rejection.bind(null,t.error)):t.table._idbstore(w,e,"locked")},_addAlgorithm:function(e){var t=this._ctx;t.algorithm=W(t.algorithm,e)},_iterate:function(e,t,n,r){return a(this._ctx,e,t,n,r)},clone:function(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&extend(n,e),t._ctx=n,t},raw:function(){return this._ctx.valueMapper=null,this},each:function(r){var i=this._ctx;return this._read(function(e,t,n){a(i,r,e,t,n)})},count:function(e){var o=this._ctx;if(F(o,!0))return this._read(function(t,e,n){var r=u(o,n),i=o.range?r.count(o.range):r.count();i.onerror=eventRejectHandler(e),i.onsuccess=function(e){t(Math.min(e.target.result,o.limit))}},e);var r=0;return this._read(function(e,t,n){a(o,function(){return++r,!1},function(){e(r)},t,n)},e)},sortBy:function(e,t){var n=e.split(".").reverse(),r=n[0],i=n.length-1;function o(e,t){return t?o(e[n[t]],t-1):e[r]}var s="next"===this._ctx.dir?1:-1;function c(e,t){var n=o(e,i),r=o(t,i);return n<r?-s:r<n?s:0}return this.toArray(function(e){return e.sort(c)}).then(t)},toArray:function(e){var c=this._ctx;return this._read(function(t,n,e){if(h&&"next"===c.dir&&F(c,!0)&&0<c.limit){var r=c.table.hook.reading.fire,i=u(c,e),o=c.limit<1/0?i.getAll(c.range,c.limit):i.getAll(c.range);o.onerror=eventRejectHandler(n),o.onsuccess=eventSuccessHandler(r===mirror?t:function(e){try{t(e.map(r))}catch(e){n(e)}})}else{var s=[];a(c,function(e){s.push(e)},function(){t(s)},n,e)}},e)},offset:function(t){var e=this._ctx;return t<=0||(e.offset+=t,F(e)?n(e,function(){var n=t;return function(e,t){return 0===n||(1===n?--n:t(function(){e.advance(n),n=0}),!1)}}):n(e,function(){var e=t;return function(){return--e<0}})),this},limit:function(e){return this._ctx.limit=Math.min(this._ctx.limit,e),n(this._ctx,function(){var r=e;return function(e,t,n){return--r<=0&&t(n),0<=r}},!0),this},until:function(r,i){return o(this._ctx,function(e,t,n){return!r(e.value)||(t(n),i)}),this},first:function(e){return this.limit(1).toArray(function(e){return e[0]}).then(e)},last:function(e){return this.reverse().first(e)},filter:function(t){var e,n;return o(this._ctx,function(e){return t(e.value)}),e=this._ctx,n=t,e.isMatch=W(e.isMatch,n),this},and:function(e){return this.filter(e)},or:function(e){return new R(this._ctx.table,e,this)},reverse:function(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this},desc:function(){return this.reverse()},eachKey:function(n){var e=this._ctx;return e.keysOnly=!e.isMatch,this.each(function(e,t){n(t.key,t)})},eachUniqueKey:function(e){return this._ctx.unique="unique",this.eachKey(e)},eachPrimaryKey:function(n){var e=this._ctx;return e.keysOnly=!e.isMatch,this.each(function(e,t){n(t.primaryKey,t)})},keys:function(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each(function(e,t){n.push(t.key)}).then(function(){return n}).then(e)},primaryKeys:function(e){var o=this._ctx;if(h&&"next"===o.dir&&F(o,!0)&&0<o.limit)return this._read(function(e,t,n){var r=u(o,n),i=o.limit<1/0?r.getAllKeys(o.range,o.limit):r.getAllKeys(o.range);i.onerror=eventRejectHandler(t),i.onsuccess=eventSuccessHandler(e)}).then(e);o.keysOnly=!o.isMatch;var n=[];return this.each(function(e,t){n.push(t.primaryKey)}).then(function(){return n}).then(e)},uniqueKeys:function(e){return this._ctx.unique="unique",this.keys(e)},firstKey:function(e){return this.limit(1).keys(function(e){return e[0]}).then(e)},lastKey:function(e){return this.reverse().firstKey(e)},distinct:function(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var r={};return o(this._ctx,function(e){var t=e.primaryKey.toString(),n=hasOwn(r,t);return r[t]=!0,!n}),this},modify:function(b){var v=this,e=this._ctx.table.hook,m=e.updating.fire,g=e.deleting.fire;return this._write(function(e,t,n,i){var o;if("function"==typeof b)o=m===nop&&g===nop?b:function(t){var e=deepClone(t);if(!1===b.call(this,t,this))return!1;if(hasOwn(this,"value")){var n=getObjectDiff(e,this.value),r=m.call(this,n,this.primKey,e,i);r&&(t=this.value,keys(r).forEach(function(e){setByKeyPath(t,e,r[e])}))}else g.call(this,this.primKey,t,i)};else if(m===nop){var s=keys(b),c=s.length;o=function(e){for(var t=!1,n=0;n<c;++n){var r=s[n],i=b[r];getByKeyPath(e,r)!==i&&(setByKeyPath(e,r,i),t=!0)}return t}}else{var u=b;b=shallowClone(u),o=function(n){var r=!1,e=m.call(this,b,this.primKey,deepClone(n),i);return e&&extend(b,e),keys(b).forEach(function(e){var t=b[e];getByKeyPath(n,e)!==t&&(setByKeyPath(n,e,t),r=!0)}),e&&(b=shallowClone(u)),r}}var a=0,l=0,r=!1,h=[],f=[],p=null;function d(e){return e&&(h.push(e),f.push(p)),t(new ModifyError("Error modifying one or more objects",h,l,f))}function y(){r&&l+h.length===a&&(0<h.length?d():e(l))}v.clone().raw()._iterate(function(e,t){p=t.primaryKey;var n={primKey:t.primaryKey,value:e,onsuccess:null,onerror:null};function r(e){return h.push(e),f.push(n.primKey),y(),!0}if(!1!==o.call(n,e,n)){var i=!hasOwn(n,"value");++a,tryCatch$1(function(){var e=i?t.delete():t.update(n.value);e._hookCtx=n,e.onerror=hookedEventRejectHandler(r),e.onsuccess=hookedEventSuccessHandler(function(){++l,y()})},r)}else n.onsuccess&&n.onsuccess(n.value)},function(){r=!0,y()},d,n)})},delete:function(){var u=this,a=this._ctx,s=a.range,l=a.table.hook.deleting.fire,h=l!==nop;if(!h&&F(a)&&(a.isPrimKey&&!hangsOnDeleteLargeKeyRange||!s))return this._write(function(n,r,i){var o=eventRejectHandler(r),e=s?i.count(s):i.count();e.onerror=o,e.onsuccess=function(){var t=e.result;tryCatch$1(function(){var e=s?i.delete(s):i.clear();e.onerror=o,e.onsuccess=function(){return n(t)}},function(e){return r(e)})}});var f=h?2e3:1e4;return this._write(function(e,t,n,r){var i=0,o=u.clone({keysOnly:!a.isMatch&&!h}).distinct().limit(f).raw(),s=[],c=function(){return o.each(h?function(e,t){s.push([t.primaryKey,t.value])}:function(e,t){s.push(t.primaryKey)}).then(function(){return h?s.sort(function(e,t){return H(e[0],t[0])}):s.sort(H),I(n,r,s,h,l)}).then(function(){var e=s.length;return i+=e,s=[],e<f?i:c()})};e(c())})}}}),extend(this,{Collection:B,Table:j,Transaction:N,Version:A,WhereClause:R}),x.on("versionchange",function(e){0<e.newVersion?console.warn("Another connection wants to upgrade database '"+x.name+"'. Closing db now to resume the upgrade."):console.warn("Another connection wants to delete database '"+x.name+"'. Closing db now to resume the delete request."),x.close()}),x.on("blocked",function(e){!e.newVersion||e.newVersion<e.oldVersion?console.warn("Dexie.delete('"+x.name+"') was blocked"):console.warn("Upgrade '"+x.name+"' blocked by other connection holding version "+e.oldVersion/10)}),s.forEach(function(e){e(x)})}function parseType(e){if("function"==typeof e)return new e;if(isArray$1(e))return[parseType(e[0])];if(e&&"object"==typeof e){var t={};return applyStructure(t,e),t}return e}function applyStructure(n,r){return keys(r).forEach(function(e){var t=parseType(r[e]);n[e]=t}),n}function hookedEventSuccessHandler(o){return wrap(function(e){var t=e.target,n=t._hookCtx,r=n.value||t.result,i=n&&n.onsuccess;i&&i(r),o&&o(r)},o)}function eventRejectHandler(t){return wrap(function(e){return preventDefault(e),t(e.target.error),!1})}function eventSuccessHandler(t){return wrap(function(e){t(e.target.result)})}function hookedEventRejectHandler(o){return wrap(function(e){var t=e.target,n=t.error,r=t._hookCtx,i=r&&r.onerror;return i&&i(n),preventDefault(e),o(n),!1})}function preventDefault(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}function awaitIterator(t){var e=function(e){return t.next(e)},i=n(e),o=n(function(e){return t.throw(e)});function n(r){return function(e){var t=r(e),n=t.value;return t.done?n:n&&"function"==typeof n.then?n.then(i,o):isArray$1(n)?Promise$1.all(n).then(i,o):i(n)}}return n(e)()}function IndexSpec(e,t,n,r,i,o,s){this.name=e,this.keyPath=t,this.unique=n,this.multi=r,this.auto=i,this.compound=o,this.dotted=s;var c="string"==typeof t?t:t&&"["+[].join.call(t,"+")+"]";this.src=(n?"&":"")+(r?"*":"")+(i?"++":"")+c}function TableSchema(e,t,n,r){this.name=e,this.primKey=t||new IndexSpec,this.indexes=n||[new IndexSpec],this.instanceTemplate=r,this.mappedClass=null,this.idxByName=arrayToObject(n,function(e){return[e.name,e]})}function safariMultiStoreFix(e){return 1===e.length?e[0]:e}function getNativeGetDatabaseNamesFn(e){var t=e&&(e.getDatabaseNames||e.webkitGetDatabaseNames);return t&&t.bind(e)}setDebug(debug,dexieStackFrameFilter),props(Dexie,fullNameExceptions),props(Dexie,{delete:function(e){var t=new Dexie(e),n=t.delete();return n.onblocked=function(e){return t.on("blocked",e),this},n},exists:function(e){return new Dexie(e).open().then(function(e){return e.close(),!0}).catch(Dexie.NoSuchDatabaseError,function(){return!1})},getDatabaseNames:function(e){var r=getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);return r?new Promise$1(function(t,e){var n=r();n.onsuccess=function(e){t(slice(e.target.result,0))},n.onerror=eventRejectHandler(e)}).then(e):dbNamesDB.dbnames.toCollection().primaryKeys(e)},defineClass:function(){return function(e){e&&extend(this,e)}},applyStructure:applyStructure,ignoreTransaction:function(e){return PSD.trans?usePSD(PSD.transless,e):e()},vip:function(e){return newScope(function(){return PSD.letThrough=!0,e()})},async:function(t){return function(){try{var e=awaitIterator(t.apply(this,arguments));return e&&"function"==typeof e.then?e:Promise$1.resolve(e)}catch(e){return rejection(e)}}},spawn:function(e,t,n){try{var r=awaitIterator(e.apply(n,t||[]));return r&&"function"==typeof r.then?r:Promise$1.resolve(r)}catch(e){return rejection(e)}},currentTransaction:{get:function(){return PSD.trans||null}},waitFor:function(e,t){var n=Promise$1.resolve("function"==typeof e?Dexie.ignoreTransaction(e):e).timeout(t||6e4);return PSD.trans?PSD.trans.waitFor(n):n},Promise:Promise$1,debug:{get:function(){return debug},set:function(e){setDebug(e,"dexie"===e?function(){return!0}:dexieStackFrameFilter)}},derive:derive,extend:extend,props:props,override:override,Events:Events,getByKeyPath:getByKeyPath,setByKeyPath:setByKeyPath,delByKeyPath:delByKeyPath,shallowClone:shallowClone,deepClone:deepClone,getObjectDiff:getObjectDiff,asap:asap$1,maxKey:maxKey,minKey:minKey,addons:[],connections:connections,MultiModifyError:exceptions.Modify,errnames:errnames,IndexSpec:IndexSpec,TableSchema:TableSchema,dependencies:{indexedDB:_global.indexedDB||_global.mozIndexedDB||_global.webkitIndexedDB||_global.msIndexedDB,IDBKeyRange:_global.IDBKeyRange||_global.webkitIDBKeyRange},semVer:DEXIE_VERSION,version:DEXIE_VERSION.split(".").map(function(e){return parseInt(e)}).reduce(function(e,t,n){return e+t/Math.pow(10,2*n)}),default:Dexie,Dexie:Dexie}),Promise$1.rejectionMapper=mapError,(dbNamesDB=new Dexie("__dbnames")).version(1).stores({dbnames:"name"}),function(){var e="Dexie.DatabaseNames";try{void 0!==typeof localStorage&&void 0!==_global.document&&(JSON.parse(localStorage.getItem(e)||"[]").forEach(function(e){return dbNamesDB.dbnames.put({name:e}).catch(nop)}),localStorage.removeItem(e))}catch(e){}}();var Dexye=function(e){function t(){e.call(this,"ratesDB"),this.version(1).stores({responses:"++id, base, date, rates, success, timestamp"})}return __extends$1(t,e),t.prototype.getLatestResponce=function(){return this.table("responses").orderBy("id").last()},t.prototype.latestResponce=function(e,t){var n=t||e;return this.table("responses").put(n),n},t.prototype.isCachedDataValid=function(e){return e},t}(Dexie),Dom=function(){function e(e,t){var n=this;this.annyang=e,this.online=t,this.elements=new Map$1,this.convertRequst$=new Subject,this.parseDom(),this.addEventListeners(),this.annyang.activated$.subscribe(function(e){return n.activateListenButton(e)}),this.annyang.convertRequst$.subscribe(function(e){return n.setValues(e)}),this.online.online$.subscribe(function(e){return n.setOnlineStatus(e)})}return e.prototype.parseDom=function(){this.elements.add("listen",document.getElementById("listen")),this.elements.add("currency-from",document.getElementById("currency-from")),this.elements.add("currency-to",document.getElementById("currency-to")),this.elements.add("amount",document.getElementById("amount")),this.elements.add("result",document.getElementById("result")),this.elements.add("online",document.getElementById("online"))},e.prototype.addEventListeners=function(){var e=this;this.elements.get("listen").addEventListener("click",function(){return e.annyang.start()}),this.elements.get("currency-from").addEventListener("change",function(){return e.convertFromDom()}),this.elements.get("currency-to").addEventListener("change",function(){return e.convertFromDom()}),this.elements.get("amount").addEventListener("keyup",function(){return e.convertFromDom()})},e.prototype.convertFromDom=function(){this.elements.get("amount").value&&this.elements.get("currency-from").value&&this.elements.get("currency-to").value&&this.convertRequst$.next({amount:parseInt(this.elements.get("amount").value),currencyFrom:this.elements.get("currency-from").value,currencyTo:this.elements.get("currency-to").value})},e.prototype.setValues=function(e){this.elements.get("currency-from").value!=e.currencyFrom&&(this.elements.get("currency-from").value=e.currencyFrom),this.elements.get("currency-to").value!=e.currencyTo&&(this.elements.get("currency-to").value=e.currencyTo),this.elements.get("amount").value!=e.amount.toFixed(2)&&(this.elements.get("amount").value=e.amount.toFixed(2))},e.prototype.activateListenButton=function(e){e?this.elements.get("listen").classList.add("bg-success"):this.elements.get("listen").classList.remove("bg-success")},e.prototype.setOnlineStatus=function(e){"online"!=e?this.elements.get("online").classList.add("bg-danger"):this.elements.get("online").classList.remove("bg-danger"),this.elements.get("online").innerHTML=e.toUpperCase()},e}(),Map$1=function(){function e(){this.items={}}return e.prototype.add=function(e,t){this.items[e]=t},e.prototype.has=function(e){return e in this.items},e.prototype.get=function(e){return this.items[e]},e}(),Online=function(){function e(){var e=this;this.online$=new Subject,window.addEventListener("online",function(){return e.updateOnlineStatus()}),window.addEventListener("offline",function(){return e.updateOnlineStatus()}),this.updateOnlineStatus()}return e.prototype.updateOnlineStatus=function(){this.online$.next(navigator.onLine?"online":"offline")},e}(),ServiceWorkerController=function(){var t=this;this.serviceWorkers=["/data-synchroniser.service.js"],"serviceWorker"in navigator&&navigator.serviceWorker.getRegistrations().then(function(e){e.length||t.serviceWorkers.forEach(function(e){return navigator.serviceWorker.register(e)})})},AppClass=function(){this.serviceWorkerController=new ServiceWorkerController,this.dexye=new Dexye,this.dataCollector=new DataCollector(this.dexye),this.annyang=new Annyang,this.online=new Online,this.dom=new Dom(this.annyang,this.online),this.converter=new Converter(this.dom,this.annyang,this.dataCollector)};window.addEventListener("load",function(){return new AppClass});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
